{
    "version": "https://jsonfeed.org/version/1",
    "title": "virtualguard's Blog",
    "description": "</>",
    "home_page_url": "http://blog.virtualguard101.xyz",
    "items": [
        {
            "id": "http://blog.virtualguard101.xyz/2025/06/23/web/",
            "url": "http://blog.virtualguard101.xyz/2025/06/23/web/",
            "title": "个人站点构建要点(改良版) && Web 开发简要实践",
            "date_published": "2025-06-23T04:38:07.000Z",
            "content_html": "<p><strong>对今年四月份写的“docker-compose + nginx快速构建个人站点”中提到的构建方式作一下改良，同时根据学到的技能添加一些自定义的玩意，2025暑假期间持续更新</strong></p>\n<p>近期在<a href=\"https://www.spaceship.com/zh/\">spaceship</a>上订阅了一个新的域名；同时还订阅了一台美国硅谷的VPS用于重构我的个人站点，也可以理解为是要搭第二个个人站点。</p>\n<p>做出这个决定的原因，一方面是想精进自己web开发的能力，多点亮一些相关的技能树；另一方面，第一个站点的服务器配置已经被我搅成一坨了——虽然还称不上💩山，但我实在是懒得整理了，干脆直接搞台新的来重构；同时新服务器的连接速度比原来那个快上不少也是一个原因，这样虽然还称不上是“方便管理”，但提供点情绪价值还是有的。</p>\n<!-- more -->\n<h2 id=\"部署要点-杂项\"><a class=\"markdownIt-Anchor\" href=\"#部署要点-杂项\"></a> 部署要点 &amp; 杂项</h2>\n<h3 id=\"部署改良\"><a class=\"markdownIt-Anchor\" href=\"#部署改良\"></a> 部署改良</h3>\n<h4 id=\"改良要点\"><a class=\"markdownIt-Anchor\" href=\"#改良要点\"></a> 改良要点</h4>\n<p>在今年的四月份我曾发布了一篇<a href=\"https://blog.virtualguard101.xyz/2025/04/26/web-build/\">文章</a>，里面主要提及了 <strong>Docker Compose + Nginx</strong> “一键部署”的部署方式。如果所部署的服务模块基本高度稳定，基本不需要通过暂停服务来处理集成/交付问题，或者服务之间几乎不存在依赖关系或依赖关系十分简单，那么这这种部署方式就不会有什么太大的问题；然而，倘若需要灵活的开发场景，例如需要经常性为站点添加新的服务，或是存在需要通过停止服务来进行配置的服务，同时服务与服务之间的依赖关系错综复杂，使用这样<strong>一体化</strong>的部署方式就需要将所有服务一并停止，这样就不利于高效开发且会降低站点的可访问性。</p>\n<p>会降低可访问性很好理解——需要频繁地关闭服务在访问者眼里就是不稳定的表现。对于不利于高效开发的问题我们举一个例子：假设你想部署一个服务，但是这个服务需要调用另一个同样部署在该主机上的某个服务的API。为了添加这个服务，你首先需要把该主机上部署的所有服务先通过<code>docker compose down</code>停止运行，然后添加这个服务的配置；在正式部署前，你想要测试一下这个服务的功能如何，结果发现依赖的API无法调用——因为它被停止了；然后你索性就不测试了，直接<code>docker compose up -d</code>一键部署，结果配置出了问题——运气好点的话，只有新服务的容器无法运行；运气不好的话，新服务可能执行了一个未定义行为在，或者传入了一个未定义参数到API服务里，结果导致API服务也崩溃了，依赖这个API服务的其他服务也就跟着崩溃了，留下一大堆与看上去新服务毫无关联的报错信息和阅读着如💩山一般报错信息风中凌乱的你…原本只要看一个服务的报错，现在要看好几个，而且其中的依赖关系可能还很复杂！那样的报错信息懂的都懂，根本就不是给人看的。这种情况就会大大增加debug的压力，也就降低了开发效率。</p>\n<p>解决这个问题，我们就需要通过把原来高度集中的微服务分散开来配置与部署来解决可能被“一锅端”的问题。针对普通的个人站点，实现的思路也很简单，现成服务的部署工具仍然是Docker + Nginx，但这次我们将二者独立开来。简单来说，旧版的部署方式是<strong>将Nginx的转发服务也一并运行于Docker</strong>，各个由Nginx转发的子服务由Docker部署，<strong>所有的服务均配置于单个<code>docker-compose.yml</code>中</strong>，可参考下图理解：</p>\n<pre class=\"mermaid\">stateDiagram-v2\n\n  A: docker-compose.yml\n  state A {\n    [*] --> service1\n    [*] --> service2\n    [*] --> ........\n    [*] --> serviceN\n\n    B: Backend Services\n    state B {\n      service1 --> Nginx: forward\n      service2 --> Nginx: forward\n      ........ --> Nginx: forward\n      serviceN --> Nginx: forward\n    }\n\n    state Nginx {\n      Description: High-performance Web Server and Reverse Proxy Handle\n    }\n  }\n\n  Nginx --> Front</pre>\n<p>而我们现在的思路则是将不同服务的<strong>部署配置</strong>(这里特指<code>docker-compose.yml</code>)分散到各个服务独立的配置路径上进行配置并由Docker部署，最后由运行于全局环境的Nginx进行转发：</p>\n<pre class=\"mermaid\">stateDiagram-v2\n\n  A: Backend Services\n  state A {\n    B: docker-compose.yml\n    C: docker-compose.yml\n    D: docker-compose.ymls\n    E: docker-compose.yml\n\n    state B {\n      [*] --> service1\n    }\n\n    state C {\n      [*] --> service2\n    }\n\n    state D {\n      [*] --> ........\n    }\n\n    state E {\n      [*] --> serviceN\n    }\n  }\n\n  state Nginx {\n    Description: High-performance Web Server and Reverse Proxy Handle(Running Globally)\n  }\n\n  service1 --> Nginx: forward\n  service2 --> Nginx: forward\n  ........ --> Nginx: forward\n  serviceN --> Nginx: forward\n\n  Nginx --> Front</pre>\n<p>理论存在，接下来就是 <s>魔法时间</s> 实际配置了。</p>\n<h4 id=\"部署流程\"><a class=\"markdownIt-Anchor\" href=\"#部署流程\"></a> 部署流程</h4>\n<h5 id=\"环境配置\"><a class=\"markdownIt-Anchor\" href=\"#环境配置\"></a> 环境配置</h5>\n<p>首先是配置环境依赖。对于服务器和域名的配置这里补充一个为服务器添加交换空间的<a href=\"https://www.digitalocean.com/community/tutorials/how-to-add-swap-space-on-ubuntu-22-04#step-3-creating-a-swap-file\">教程</a>（对于“什么是交换空间”、“交换空间有什么用”，这篇教程描述得足够详尽了），其余部分不再赘述，主要看看两个部署工具以及一些可能需要用到的工具的配置</p>\n<ul>\n<li>\n<p>Docker</p>\n<ul>\n<li>安装<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install docker-compose</span><br></pre></td></tr></table></figure>\n</li>\n<li>配置用户组<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> groupadd docker <span class=\"comment\"># 若尚不存在 docker 组，则需先创建</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> usermod -aG docker <span class=\"variable\">$USER</span></span><br></pre></td></tr></table></figure>\n配置完用户组后需要重启使配置生效。</li>\n</ul>\n</li>\n<li>\n<p>Nginx</p>\n<ul>\n<li>从前面的理论方案中我们知道，这次的Nginx不再运行于容器之中，而是运行在全局环境下的，因此我们需要在服务器上安装它：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li>将Nginx服务设置为开机自启<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">enable</span> nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>certbot（SSL证书申请工具）</p>\n<ul>\n<li>安装<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install certbot</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>cron（定时任务）</p>\n<ul>\n<li>安装<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install cron</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"目录结构\"><a class=\"markdownIt-Anchor\" href=\"#目录结构\"></a> 目录结构</h5>\n<p>配置完环境依赖，我们就可以开始为部署做准备了，首当其冲的自然是为不同的分别服务创建独立的配置与数据空间。</p>\n<p>在改良理论方案中我们提到，要为每个微服务独立配置一个<code>docker-compose.yml</code>以实现不同服务之间的相互独立与互不干扰——这是与旧方案最为本质的区别；但在目录创建与管理上，我们现在所介绍的新方案则与旧方案没有太大的区别。下面是一个针对新方案的web服务目录结构案例（其中包含了两个后端服务）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/webservices</span><br><span class=\"line\">├── service1</span><br><span class=\"line\">│   ├── config</span><br><span class=\"line\">│   │   └── config.json</span><br><span class=\"line\">│   ├── docker-compose.yml</span><br><span class=\"line\">│   ├── fonts</span><br><span class=\"line\">│   └── icons</span><br><span class=\"line\">├── nginx -&gt; /etc/nginx</span><br><span class=\"line\">├── scripts</span><br><span class=\"line\">│   ├── servicesManager.sh</span><br><span class=\"line\">│   └── sslrenew.sh</span><br><span class=\"line\">└── service2</span><br><span class=\"line\">    ├── docker-compose.yml</span><br><span class=\"line\">    └── data</span><br><span class=\"line\">        └── .....</span><br></pre></td></tr></table></figure>\n<p>对于我们需要部署的后端服务而言，每个微服务的配置仍然分属于各个目录中。与旧方案唯一的不同地方就是各个服务的目录下都多了一个属于它们自己的<code>docker-compose.yml</code>，相当于把旧方案中存在与web服务集群根目录的<code>docker-compose.yml</code>配置肢解到各个服务独立的目录中。</p>\n<p>这里你可能会发现nginx的目录是一个<strong>软链接</strong>，关于这个我们接下来在<a href=\"#Nginx%E7%9A%84%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE\">Nginx的配置</a>中介绍。</p>\n<h5 id=\"nginx的全局配置\"><a class=\"markdownIt-Anchor\" href=\"#nginx的全局配置\"></a> Nginx的全局配置</h5>\n<p>对于各个服务<code>docker-compose.yml</code>的配置这里基本没有新的东西可以介绍，其中一个比较明显的区别就是网路环境变成全局的了，所以不用在额外配置<code>networks</code>参数。</p>\n<p>最主要的区别还是在<code>nginx.conf</code>的配置上，因此我们接下来详细介绍。</p>\n<p>由于这次的Nginx运行在全局环境下，自然也需要通过编辑全局的配置文件来驱动其执行转发服务。</p>\n<blockquote>\n<p>在Linux中，Nginx的全局配置<code>nginx.conf</code>位于路径<code>/etc/nginx</code>下，需要<strong>sudo提权</strong>才可以保存配置，如果使用vscode的远程资源管理器连接的服务器，可能无法直接在窗口上直接使用vscode编辑<code>nginx.conf</code>，比较方便且安全的解决方法有两个：一是直接在终端上提权使用vim对目标文件进行编辑 <s>那我还用vscode干什么</s>；还有一个就是安装插件<a href=\"https://marketplace.visualstudio.com/items?itemName=yy0931.save-as-root\">Save as Root in Remote</a>，通过插件提权保存。</p>\n<p>同时，如果是使用vscode进行的远程连接，可以在通过在web服务集群的根目录下创建Nginx配置目录(<code>/etc/nginx</code>)和日志目录(<code>/var/log/nginx</code>)的<strong>软链接</strong>来提高开发效率</p>\n</blockquote>\n<p>事实上，新方案在配置内容上只需要修改几个参数，总体的配置可能比旧方案还更好理解，下面给出一个简单的例子：</p>\n<p>假设有一个待转发的服务运行于主机的5000端口上，那么有以下配置模板可供参考（注意需要插入到合理的位置，<code>nginx.conf</code>在安装Nginx时通常会自带一些配置；在这里，“合理的位置”<strong>至少</strong>指的是要在<code>http</code>模块中）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten 80;</span><br><span class=\"line\">\t# listen [::]:80;</span><br><span class=\"line\"></span><br><span class=\"line\">\tserver_name  your_domain.here;</span><br><span class=\"line\">\tserver_tokens off;</span><br><span class=\"line\"></span><br><span class=\"line\">\t#配置http验证可访问</span><br><span class=\"line\">\tlocation /.well-known/acme-challenge/ &#123;</span><br><span class=\"line\">\t\troot /usr/share/certbot/www;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t#http跳转到https</span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\treturn 301 https://$host$request_uri;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#  server &#123;</span><br><span class=\"line\"> #   listen 80;</span><br><span class=\"line\">#   server_name  your_domain.here;</span><br><span class=\"line\"></span><br><span class=\"line\"> #   location / &#123;</span><br><span class=\"line\"> #     proxy_pass http://127.0.0.1:5000;</span><br><span class=\"line\"> #     proxy_set_header Host $host;</span><br><span class=\"line\"> #     proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\"> #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\"> #     proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\"> #   &#125;       </span><br><span class=\"line\"> #   # 强制HTTPS重定向</span><br><span class=\"line\"> #   # return 301 https://$host$request_uri;</span><br><span class=\"line\"> # &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten 443 ssl http2;</span><br><span class=\"line\">\tserver_name  your_domain.here;</span><br><span class=\"line\"></span><br><span class=\"line\">\tssl_certificate /etc/letsencrypt/live/your_domina.here/fullchain.pem;</span><br><span class=\"line\">\tssl_certificate_key /etc/letsencrypt/live/your_domain.here/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\tproxy_pass http://127.0.0.1:5000;</span><br><span class=\"line\">\t\tproxy_set_header Host $host;</span><br><span class=\"line\">\t\tproxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">\t\tproxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>配置上的原理也很简单，简单理解就是在用户访问运行于<code>80</code>/<code>443</code>的HTTP/HTTPS服务时，将运行于<code>5000</code>端口上的后端服务作一次转发。</p>\n<blockquote>\n<p>⚠️注意在<code>docker-compose.yml</code>中，<code>port</code>参数<code>:</code>前的端口号才是宿主机的端口号，也就是我们需要写入<code>nginx.conf</code>的端口号</p>\n</blockquote>\n<h5 id=\"ssl证书申请\"><a class=\"markdownIt-Anchor\" href=\"#ssl证书申请\"></a> SSL证书申请</h5>\n<p>第一次申请的操作和定时任务的配置可以参考<a href=\"https://kasuie.cc/article/22\">这篇文章</a></p>\n<p>虽然已经运行了Nginx服务，但我们仍然可以通过<code>standalone</code>模式获取证书，但这需要先将Nginx服务关闭以释放<code>80</code>端口，否则会提示端口被占用而无法申请；申请完证书后再重新启动Nginx即可。当然，也可通过<code>webroot</code>模式直接申请。</p>\n<blockquote>\n<p>⚠️由于使用certbot时需要提权运行，所以在配置定时任务时也需要进行sudo提权：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> crontab -e</span><br></pre></td></tr></table></figure>\n<p>否则可能会遇到定时任务无权限运行certbot的尴尬情况</p>\n</blockquote>\n<h5 id=\"服务管理脚本\"><a class=\"markdownIt-Anchor\" href=\"#服务管理脚本\"></a> 服务管理脚本</h5>\n<p>当服务数量越来越多，且依赖关系越来越复杂时，每次需要配置一个服务可能就需要频繁地切换目录以及输入一些冗长的命令，这时就可以通过编写自动化脚本来 <s>偷懒</s> 提高效率。</p>\n<p>对于逻辑比较简单（比如线性逻辑）且shell命令相对密集的系列操作，我们就可以通过编写shell脚本来解决；而对于逻辑相对复杂且需要高度定制化的系列操作，我们就可以交给python脚本来解决，这样不容易出错。</p>\n<p>编写python脚本前，我们需要先安装python：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install python3</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install pip</span><br></pre></td></tr></table></figure>\n<p>Ubuntu默认安装python3.10，如果对版本有特殊要求，可以安装一个虚拟环境管理器。这里以<a href=\"https://docs.astral.sh/uv/\">uv</a>为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -LsSf https://astral.sh/uv/install.sh | sh</span><br></pre></td></tr></table></figure>\n<!-- [ ] 脚本模板案例 -->\n",
            "tags": [
                "web开发",
                "docker"
            ]
        },
        {
            "id": "http://blog.virtualguard101.xyz/2025/06/20/2024-2025summary/",
            "url": "http://blog.virtualguard101.xyz/2025/06/20/2024-2025summary/",
            "title": "2024-2025：艰难的起步",
            "date_published": "2025-06-20T13:10:33.000Z",
            "content_html": "<p><strong>对CS自学之路的第一年，也是大学生活的第一年的一个简单复盘</strong></p>\n<p>在大学的第一年——也是正式开始CS自学旅途的第一年（周年）随着暑假的临近也就快要结束了，是时候乘着 <s>期末复习</s> 休闲的时间写一下这个学年的学年总结与复盘了。</p>\n<p>事实上，对于这个学年的成果我个人并不满意，但也正因如此，才需要通过客观、辨证的总结来修正错误的方法与方向。</p>\n<!-- more -->\n<h2 id=\"做了什么\"><a class=\"markdownIt-Anchor\" href=\"#做了什么\"></a> 做了什么</h2>\n<p>似乎做了很多，又似乎什么都没做…🙃至于为什么，后面再分析。</p>\n<h3 id=\"暑假\"><a class=\"markdownIt-Anchor\" href=\"#暑假\"></a> 暑假</h3>\n<ul>\n<li>\n<p>第一台个人计算机💻</p>\n<p>拿到第一台个人💻（家里的电脑基本不让我动，而且其本身基本也成为<strong>赛博养蛊</strong>的载体了）的第一件事就是下 <s>steam</s> <strong>vscode</strong>，之前在高中的时候在班级的多媒体设备上不知道为什么“下不了”，好不容易下好了发现不会配环境😅；</p>\n<p>同时因为某些不明原因，班级里有些人似乎对我使用“公共设施”学习抱有意见——明明特地挑了不会影响他们的时间与方式，而且我个人也是管理多媒体设备的班干部。也不知道是不是他们觉得我在装X…<s>现在想想，当时的脸皮还是太薄了</s></p>\n<p>不小心说了点废话，总的来说，我在拿到这台电脑前几乎是没有任何渠道可以自学CS的，因此当时的心情是十分激动的，这台电脑几乎就是我最初的学习CS的工具。至于“为什么不看书”、“不会手写代码吗”这类言辞相信应该不会从能看到这篇文章的人嘴里说出；而且我真的去看了，举一个最典型的例子：我永远也不会忘记当时作为一个毫无CS基础的白痴，翻开<a href=\"https://csappbook.blogspot.com/\">这本书</a>后我的反应😅。</p>\n</li>\n<li>\n<p>自学了C语言的基础</p>\n<p>这几乎占据了我暑假里80%的个人时间，所以我暑假期间直到8月底快要入学了都没有离开我从小生活的县城。</p>\n<p>虽然但是，我是<strong>花钱</strong>看的网上所谓的培训班学的，这里就不展开了。</p>\n</li>\n<li>\n<p>在一位福大信息安全的朋友的帮助下初步了解了科学上网🪜的方法</p>\n<p>这个虽然不起眼，但是十分重要，可以说是改变我获取资源的途径的基础，只不过当时没意识到</p>\n</li>\n</ul>\n<h3 id=\"上学期\"><a class=\"markdownIt-Anchor\" href=\"#上学期\"></a> 上学期</h3>\n<p>这是在大学的第一个学期，主要以信息收集为主，同时兼顾学业以争取转专业名额。</p>\n<ul>\n<li>\n<p>了解在大学中计算机“破局”主要的三个方向：<strong>项目</strong>、<strong>竞赛</strong>、<strong>科研</strong></p>\n</li>\n<li>\n<p>结识了许多校内计算机方向的大佬与老师，主要是技术/安全协会的学长学姐与安全方向的同届同学</p>\n</li>\n<li>\n<p>在大佬与老师的引导与帮助下彻底放弃了“跟班”式的学习方式</p>\n<p>说起来也有点意思，暑假报的那个培训班我在入学后不久就退款了，原因有二：一是与我当时感兴趣的方向（安全）不太一致；二是我发现里面所谓的指导老师似乎对于计算机行业的认知还不如我，负责技术指导的老师更是 <s>人机</s> 连工具都不会用。举个最难绷的例子，我用vscode（众所周知，vscode本身是文本编辑器而不是IED）时碰到了一个最简单的配置问题，甚至都不需要修改配置文件，他上来就让我把编辑器换成他们教学指定的IDE，而我在搜索了资料后发现就是环境变量的问题…更搞笑的是我是在他们课程的宣传广告或着叫<strong>公开课</strong>上的某个视频还是评论找到解决方案的🤣。不过好在人家最起码不是诈骗，退款还是可以退的，但还是赔了亿点点（因为看了一点课）。</p>\n<p>后面我在参与学校与某个企业联合举办的竞赛时又双叒叕被推送了他们自己的培训方案，这一次我是差点就交了近3万的培训费去学所谓的“网络工程”，当初对网络安全很感兴趣，头脑发热就去问了，好在最后被某个大佬和老师拦下了。这次也不是没有收获，除了彻底抛弃了“跟班”思维，决定自己独立定制我个人的<strong>培养方案</strong>，也认识了 <code>Cyber Security</code> 与 <code>Network Security</code>的区别（虽然不敢讲全部，但他在所谓的竞赛培训上讲的内容，除了<strong>思科模拟器</strong>的使用，其他内容我基本有一定的了解）</p>\n<p>总而言之，从这里开始，我的<strong>CS自学之路</strong>或许才真正意义上称得上是<strong>入门与起步</strong>。乐观的讲，至少没有中道崩殂吧…🙃</p>\n</li>\n<li>\n<p>与网安同届的同学组队打了几次CTF线上赛</p>\n<p>虽然都是一些小比赛，外加压根就没什么水平，所以挺水的，不过也结识了网安的朋友，同时由于我们学校对这方面不太重视，CTF鲜为人知（甚至连前面提到的安全协会都是基本只有网安专业的同学知道），为后续转专业提升了个人竞争力。</p>\n<p>社会工程学魅力时刻了属于是😁</p>\n</li>\n<li>\n<p><strong>翻出了在网页收藏夹中积灰已久的<a href=\"https://csdiy.wiki/\">csdiy</a></strong></p>\n<p>在整理网站资源的时候发现了早在高中时朋友就推荐的<a href=\"https://csdiy.wiki/\">CS自学指南</a>，当时因为<strong>没有科学上网工具</strong>打不开，但多少知道这是个宝藏，然而这时已经临近上学期期末了（你猜我前面为什么说我没意识到<em>科学上网是改变我获取资源的途径的基础</em>），也就是说我“浪费”了近一个学期的时间走了CS自学的“第一条弯路”，是的，这只是第一条🙃。</p>\n<p>还有一点忘了说，在再次发掘出这个宝藏前、放弃“跟班”式学习后，我的自学几乎依靠形如<a href=\"https://www.runoob.com/\">菜鸟教程</a>的<strong>文档式教程</strong>。至于我对文档式教程的看法，我个人认为其更适合用于<strong>快速参考</strong>或某些技术栈的<strong>入门速通</strong>，不建议在深入学习时依赖——<strong>文档之所以被称之文档就是因为其“仅供参考”</strong></p>\n</li>\n<li>\n<p>使用积蓄购买了第二台💻</p>\n<p>这是一个艰难但在我看来正确的一个决定。冒着被扣上“乱花钱”帽子的风险，主要还是为了一劳永逸地解决我一直以来头痛的续航问题，但出乎意料的，这台轻薄本（我给其编号为<code>PC1</code>，第一台自然就是<code>PC0</code>）对于生产环境的兼容性似乎远超<code>PC0</code>，这解决了另一个使我头痛的问题——<code>PC0</code>上一些困扰了我很久的兼容性问题；日常的使用体验也是如此，也不知道是不是因为<code>PC0</code>是我的第一台个人电脑，我没正确维护导致的兼容性问题。</p>\n</li>\n</ul>\n<h3 id=\"寒假\"><a class=\"markdownIt-Anchor\" href=\"#寒假\"></a> 寒假</h3>\n<ul>\n<li>\n<p>速通<a href=\"https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/MIT-Missing-Semester/\">MIT Missing Semester</a></p>\n<p>对于里面大部分内容的<strong>基础操作</strong>在上学期的“弯路”中多少有点了解，如Git、Shell等。可惜的是我并没有静下心来完善进阶部分，这个问题实际贯穿了整个学年的学习，后面会做分析。</p>\n</li>\n<li>\n<p>开始使用Linux操作系统</p>\n<p>这也可以算得上是一个重要的节点。起因是我在学习<a href=\"https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/MIT-Missing-Semester/\">MIT Missing Semester</a>时，本意是使用VM来学习Shell，然后就碰到了该死的 “没有正确卸载VM” 导致的一系列问题（历史遗留问题.jpg）。在给<code>PC0</code>几次重置重装系统无果后，一怒之下，我就看着网上的教程和资料给<code>PC1</code>（<code>PC1</code>的Win11对VM的兼容性也不好）装了双系统（Ubuntu22.04 + Win11）</p>\n</li>\n<li>\n<p>自学<a href=\"https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/Python/CS61A/\">CS61A</a></p>\n<p>这可以称得上是“斯大林格勒”了（好吧其实没那么夸张），看这门课时我和<a href=\"https://csdiy.wiki/#cs61a\">csdiy第一贡献者的感想</a>是一致的。</p>\n</li>\n</ul>\n<h3 id=\"下学期\"><a class=\"markdownIt-Anchor\" href=\"#下学期\"></a> 下学期</h3>\n<ul>\n<li>\n<p>创建了自己的第一个独立项目——基于<a href=\"https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/3Python/CS61A/\">CS61A</a>的学习用py手搓了一个简陋的<a href=\"https://github.com/virtualguard101/space-calculator\">立体几何计算器</a>（简陋到甚至都不支持曲线与曲面）</p>\n</li>\n<li>\n<p>在导师的邀请下开始试图参考网上<a href=\"https://zhuanlan.zhihu.com/p/714400366?utm_psn=1883987006549374851\">大佬的项目</a>使用FPGA来<a href=\"https://projects.virtualguard101.xyz/posts/gpu-researching-log/\">“手搓GPU”</a></p>\n<p>可惜我对硬件方面确实没有太大的兴趣，加上缺少这方面的基础与我对自身学习进度的认知偏差，导致我在一些不必要的地方“浪费”了很多时间。因此这个项目在现阶段而言对我的帮助我个人认为十分有限。</p>\n</li>\n</ul>\n<h4 id=\"5月份\"><a class=\"markdownIt-Anchor\" href=\"#5月份\"></a> 5月份</h4>\n<ul>\n<li>\n<p>构建了自己的<a href=\"https://virtualguard101.xyz/\">第一个个人站点</a>（这个才是真正的“斯大林格勒”）</p>\n<p><img src=\"https://i.imgur.com/euiV0r7.jpeg\" alt=\"\" /></p>\n</li>\n</ul>\n<blockquote>\n<p>站点背景图片来源：<a href=\"https://b23.tv/7vno0Mx\">为生而战，向死而生 | 何春秋-宙道分身</a>（图片作了分辨率处理），已获得作者授权：<img src=\"https://i.imgur.com/CMNtFos.png\" alt=\"\" /></p>\n</blockquote>\n<p>在正式踏上自学之路后不久，我一直在探索能够高效整合信息/资源（人话：记笔记）的方式，特别是在五月份受导师邀请开始“手搓GPU”后，单位时间里需要接收的信息量越来越多，脑子里能留住的有效信息却越来越少。最后思来想去还是发现<strong>使用<code>CI/CD</code>工具链构建的个人站点</strong>最合适。</p>\n<p>这里要特别感谢学校技术协会的大佬，对站点建设提供了一系列相对现代化的构建建议。</p>\n<p>建站后在协调大量信息的存储与分类时我也遇到了不少麻烦，包括但不限于如何选取合适的主题/文档构建工具来使博客更加美观且实用；哪些构建工具/框架适合用于笔记以使其能够被高效地回顾、查阅等，这些我们<a href=\"#%E7%AB%99%E7%82%B9%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E4%B8%8E%E4%B8%BB%E9%A2%98%E7%9A%84%E9%80%89%E6%8B%A9\">后面</a>再谈</p>\n<ul>\n<li>\n<p>自学<a href=\"https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/cpp/CS106L/\">CS106L</a></p>\n<p>这是建设了个人站点后的第一个具有<a href=\"https://note.virtualguard101.xyz/notes/Programming%20Language/c%2B%2B/C%2B%2B%20Fundamental/00-type-structure/\">相对完善笔记</a>的自学课程，我快速过了一下，其中大部分的<a href=\"https://github.com/virtualguard101/cs106l-assignments\">Assignments</a>还没来得及做。</p>\n</li>\n<li>\n<p>开始使用Arch Linux作为主操作系统</p>\n<p><img src=\"https://i.imgur.com/oVkMHug.jpeg\" alt=\"\" /></p>\n<p><s>因为我是南梁</s></p>\n<p>使用了近半年的Ubuntu，终于还是对Arch动心了。<a href=\"https://blog.virtualguard101.xyz/2025/05/19/arch-linux/\">这篇文章</a>记录了一些我在安装过程遇到的一些要点与问题。</p>\n</li>\n<li>\n<p>创建项目<a href=\"https://github.com/virtualguard101/3BodySimulator\">3BodySimulator</a></p>\n<p>这是我个人为学习C++项目构建与管理而创建的<strong>案例式项目</strong>，学习的知识主要聚焦于cpp项目的构建流程与<a href=\"https://note.virtualguard101.xyz/notes/tools/Build%20Tools/cmake/\">CMake等工具的使用</a>，代码逻辑的所有内容以及项目架构的部分内容由AI代为完成。</p>\n<p>按照惯例（自从有个人站点后，我有随手为自己的项目写文档的习惯，特别是用于学习的项目），我也为此写了一篇<a href=\"https://blog.virtualguard101.xyz/2025/05/23/3BodySimulator/\">解构文档</a></p>\n</li>\n<li>\n<p>转专业拟接收名单公示，不出意外的话就是成功转入网络空间安全了</p>\n<p>转入网安主要还是因为我们学校这个专业后期课程量相对较少，算是为未来的自己争取到了一点时间吧</p>\n</li>\n</ul>\n<h4 id=\"6月份\"><a class=\"markdownIt-Anchor\" href=\"#6月份\"></a> 6月份</h4>\n<ul>\n<li>\n<p>进一步完善了<a href=\"https://note.virtualguard101.xyz/notes/tools/git/\">Git的学习</a></p>\n<p>说的难听一点，对于Git在此之前我可能只会“三板斧（<code>add</code>、<code>commit</code>、<code>push</code>）”</p>\n</li>\n<li>\n<p>基本明确自己的努力方向——围绕自动化与云原生；目标岗位基本明确为后端开发、服务器开发、自动化类岗位（构建开发、测试开发等）三者或类似岗位</p>\n<p>这也是一个看起来并不起眼但却十分重要的一个节点，它标志着我一年以来“内耗式”学习的终结，其中问题与经验我们后面再谈</p>\n</li>\n</ul>\n<h2 id=\"问题所在\"><a class=\"markdownIt-Anchor\" href=\"#问题所在\"></a> 问题所在</h2>\n<p>是时候进入最为重要的<strong>问题总结</strong>与<strong>纠错</strong>环节了，错误本身并不可怕——可怕的是缺乏面对错误的勇气与意识</p>\n<h3 id=\"学习方面\"><a class=\"markdownIt-Anchor\" href=\"#学习方面\"></a> 学习方面</h3>\n<h4 id=\"一系列左倾错误导致的连锁反应\"><a class=\"markdownIt-Anchor\" href=\"#一系列左倾错误导致的连锁反应\"></a> 一系列“左倾”错误导致的连锁反应</h4>\n<blockquote>\n<p>这是一个<strong>系列问题</strong></p>\n</blockquote>\n<p>由于是系列问题导致的连锁反应，以一种<strong>自顶向下</strong>的方式来分析问题就会稍微方便且清晰。下面的流程图将问题之间以及问题与其导致的后果以<strong>图</strong>的形式从实际问题中<strong>抽象</strong>出来，以便后续的分析与解决（本来想用<a href=\"https://mermaid.js.org/intro/\">mermaid</a>的，但写了半天发现渲染不出来，最后用的文档扫描转图片）：</p>\n<p><img src=\"https://i.imgur.com/xbuGDDR.jpeg\" alt=\"\" /></p>\n<p>图中的分析虽然不尽完美，但已经把一年以来最为主要与急需解决的问题以一种抽象的方式总结出来了（毕竟这是我第一次采用这种分析法分析问题）</p>\n<p>外因的情况较为特殊，同时其对自学的影响已经不再是实质上的影响了，这里简要说明</p>\n<ul>\n<li>\n<p>外因（环境因素）</p>\n<p>在暑假和上学期，我的<strong>独立自主</strong>学习意识十分薄弱——这里的“独立自主”不单指<strong>学习积极性</strong>，还包括对<strong>信息收集能力</strong>、<strong>自主规划能力</strong>、<strong>信息整合分析能力</strong>的重视度。如果单单只有满腔热血，在当今互联网信息良莠不齐的时代这一点反倒更有可能成为自学时致命的缺点，在网络广告的诱导下差点陷入“跟班”式学习（那就不叫自学了）的陷阱就是一个再好不过的例子。然而这种能力似乎真的看个人——或者说需要时间沉淀；同时，国内的计算机教育与网络环境懂的都懂，下面两张截图的对比（前后分别是同一搜索对象，<strong>未使用科学上网工具、国内版edge的搜索结果</strong>与<strong>开启了科学上网工具、chrome的搜索结果</strong>）就是一个例子：</p>\n<p><img src=\"https://i.imgur.com/EMEvQ2c.jpeg\" alt=\"未使用科学上网工具、国内版edge的搜索结果\" /></p>\n<p><img src=\"https://i.imgur.com/m4yxp37.jpeg\" alt=\"开启了科学上网工具、chrome的搜索结果\" /></p>\n<p>或许是因为在高考结束前压根就没有自学计算机的环境，导致我刚开始时一直在<strong>试错</strong>与<strong>走弯路</strong>；虽说在高考前我在朋友的帮助下对计算机的行业信息与国内的本科教育现状（特别是计算机方向）已经有了初步的了解，但说实话，真的只是<strong>冰山一角</strong>，一方面缺少<strong>科学上网</strong>工具，另一方面没有那种明确目标的意识，二者在CS的学习中都是十分致命的问题，特别是自学。</p>\n<p>将问题归结到环境上并不是推卸责任，计算机这个行业本身就是一种高度依赖环境且需要持续浸淫的的东西，没有日积月累的沉淀与深耕是不可能有真正意义上技术成果的（实际上大部分领域都是这个道理，但是计算机领域介于其学习资源获取方式的特殊性，相较其他领域或许两极分化更加明显），这是基于我一年以来对身边技术朋友的观察得出的结论。</p>\n</li>\n</ul>\n<p>针对外因，只要学习积极性不变且有一台（可联网的）计算机可以操作，其影响会随着经验的积累而逐渐减弱。自高考结束后，“中式教育”的高压约束不复存在——相反，这时我的父母反而会十分支持我，哪怕我没有成为他们希望的模样。已经流逝的时间无法挽回，与成为真正大佬的差距现在只能靠在日常多花数倍的时间沉淀来弥补</p>\n<p>简单来说，<strong>高考结束后，外因也就转化为内因了</strong>，即条件/环境与学习需求的矛盾转化为了自身学习能力与期望效率之间的矛盾，但前提是校内学业压力的可控，否则学业问题会消耗很多时间。</p>\n<p>事实上，这幅图主要还是聚焦于“内因”的分析，同时还有一个类似<strong>递归</strong>的节点关系——这点我没有处理好，导致其有点难以理解：</p>\n<p>注意图中有一个名为“内因”的节点<code>G</code>，与我们所言的内因实际上是一个东西，可以简单将其视为<strong>除外因（<code>F</code>）节点外，对图中其他所有节点的封装</strong>——它的位置与关系或许不恰当，但它想要说明的问题是：<strong>内因综合在一起本身就会加剧学习/信息整合能力低下的问题，而且由于学习积极性高涨，学习需求强烈，后者又会加剧前者中“内耗式学习”与“急于求成”的问题，从而陷入一个巨大的恶性循环</strong>。</p>\n<p>现在注意力来到这幅图抽象出的“最本质”的问题，即分属于两个核心问题的四大矛盾：</p>\n<ul>\n<li>\n<p>学习规划上具体方向不明确</p>\n<ul>\n<li>\n<p>学习需求与个人认知之间的矛盾（因果）</p>\n</li>\n<li>\n<p>信息过载与有效筛选之间的矛盾（因果）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>学习进程上急于求成</p>\n<ul>\n<li>\n<p>个人实际能力与期望能力之间的矛盾（因果）</p>\n</li>\n<li>\n<p>学习行为与学习规律之间的矛盾（原理）</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>现在就不难发现，所谓的“左倾”，指的是<strong>在学习进程上急于求成</strong>，而忽略了个人的实际能力；另外，缺少高效的信息整合方法也是这一年以来学习方法问题上巨大的痛点，但这也需要在漫长的学习过程中总结转化，与“急于求成”的学习行为也是矛盾的。</p>\n<p>至于学习规划上的问题，两个矛盾甚至是问题本身的指向就已经十分明确了，一是缺乏认知；二是未能高效、合理地筛选信息——这就回到刚刚说的个人能力的问题了，也需要时间进行学习转化。</p>\n<p>值得庆幸的是，经过一年以来的摸爬滚打，对于学习规划上的问题，我已经积累了足够的经验，以至于我在写这篇复盘前的一周便彻底明确了自己的努力方向，这在<a href=\"#6%E6%9C%88%E4%BB%BD\">做了什么</a>中也有所提及。</p>\n<p>至于“急于求成”的问题，抛弃不切实际的幻想，脚踏实地走好每一步是最核心的解决方式，同时还需要与后面的提到的几个问题相结合——<a href=\"#%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%9A%BE%E4%BB%A5%E9%9D%99%E5%BF%83\">静心学习</a>、<a href=\"#%E6%9C%AA%E8%83%BD%E6%B8%85%E6%99%B0%E5%88%92%E5%88%86%E5%AD%A6%E4%B8%8E%E7%8E%A9%E7%9A%84%E7%95%8C%E9%99%90\">“玩”与“学”的边界</a>。</p>\n<h4 id=\"时间实际利用率低\"><a class=\"markdownIt-Anchor\" href=\"#时间实际利用率低\"></a> 时间实际利用率低</h4>\n<p>这个问题除了上面所说的“效率问题”，还有一部分是作息安排上的问题</p>\n<p>作息不规律导致的时间浪费也是一年以来学习规划上的痛点，同时我的身体健康也因此受到了不小的影响</p>\n<h4 id=\"学习过程中难以静心\"><a class=\"markdownIt-Anchor\" href=\"#学习过程中难以静心\"></a> 学习过程中难以静心</h4>\n<p>这个问题除了上面图中所说的“急于求成”以外，还有一个原因就是我玩心本来就挺重的（“玩心”这种东西懂的都懂😋），对于自己感兴趣的领域，我总是喜欢“超前”地了解些新东西。</p>\n<p>对于这个问题，辨证地看待它不难发现，它在我刚开始自学的那段时间客观上促进了我摆脱“跟班式”学习的陷阱；然而随着学习进程的推进与日益增长的信息量，这个问题对我的影响开始由利转弊了——它开始成为我高效学习与整合信息的障碍（<a href=\"https://www.bilibili.com/video/BV1sFLMzJEgU/\">黄金替罪羊.jpg</a>）。有意思的是，这个问题在我高考前的应试教育学习阶段也是一个十分突出的问题，只不过当年的我还是太年轻，没有及时系统分析自己在学习方法上存在的问题。</p>\n<p>对于现阶段如何解决这个阻碍，除了下文提到的<a href=\"#%E6%9C%AA%E8%83%BD%E6%B8%85%E6%99%B0%E5%88%92%E5%88%86%E5%AD%A6%E4%B8%8E%E7%8E%A9%E7%9A%84%E7%95%8C%E9%99%90\">学与玩的边界</a>外，还可以专门腾出一部分时间“顺其自然”，把它当作是一种“预习”——将这个行为利用起来，而不是尝试去克制、抹杀它。对于源于本性的问题，想要在短期内快速解决，“大禹治水”式的方式是最合适的。但仍需注意时间安排的问题，或是说是一种“划分”问题——这就与<a href=\"#%E6%9C%AA%E8%83%BD%E6%B8%85%E6%99%B0%E5%88%92%E5%88%86%E5%AD%A6%E4%B8%8E%E7%8E%A9%E7%9A%84%E7%95%8C%E9%99%90\">下文</a>联系起来了。</p>\n<h3 id=\"实践方面\"><a class=\"markdownIt-Anchor\" href=\"#实践方面\"></a> 实践方面</h3>\n<h4 id=\"闭门造车\"><a class=\"markdownIt-Anchor\" href=\"#闭门造车\"></a> “闭门造车”</h4>\n<p>主要问题是在开发实践中脱离实际，过度“独立”，团队协作意识薄弱，团队协作开发技能（如Git分支相关操作、代码审计等）能力低下</p>\n<p>一部分的原因大概就是因为我在转专业前不是计算机专业的学生，离我最近的那些人都没有技术意识吧。总而言之就是缺少那种氛围，周围几乎没有人能和我协同学习或搞开发。</p>\n<h4 id=\"未能清晰划分学与玩的界限\"><a class=\"markdownIt-Anchor\" href=\"#未能清晰划分学与玩的界限\"></a> 未能清晰划分“学”与“玩”的界限</h4>\n<p>这个虽然是前面分析<a href=\"#%E4%B8%80%E7%B3%BB%E5%88%97%E5%B7%A6%E5%80%BE%E9%94%99%E8%AF%AF%E5%AF%BC%E8%87%B4%E7%9A%84%E8%BF%9E%E9%94%81%E5%8F%8D%E5%BA%94\">一系列“左倾”错误</a>时那副关系图中提到的一个节点问题，但我认为有必要就学习规划的角度将其拿出来讲一讲。</p>\n<p>“玩”与“学”的关系其实是很微妙的：在技术领域（其他领域我不知道），二者可以相得益彰，但也可以“相克相制”，取决于规划的方式与规划者的自制力。倘若<strong>玩的东西的实际意义不大</strong>或是<strong>与“学”的关联性较低</strong>，那么这种“玩”就与学无益——最多提供些情绪价值。</p>\n<p>对于我过去一年以来的经历，前者的占比似乎不大，这是效率上的问题；而后者就有“好高骛远”的嫌疑，这也和前面的分析一致。</p>\n<p>解决方法有两个：一是在学某个模块的内容时专注于“玩”这个模块的内容；二是彻底分割二者的关系。两种方法各有利弊，前者专注而略显枯燥、后者灵活而略显低效。对于后者，还有一个“改良版”——结合两者的特征，同时存在两个“玩”的内容。因为仍需划分“学”与“玩”，故本质上还是后者，且对规划能力与自制力的要求高。</p>\n<h2 id=\"经验总结\"><a class=\"markdownIt-Anchor\" href=\"#经验总结\"></a> 经验总结</h2>\n<p>其实前文都总结得差不多了，不过这里还有两个经验需要补充：</p>\n<h3 id=\"一个在明确自己努力方向时的发现\"><a class=\"markdownIt-Anchor\" href=\"#一个在明确自己努力方向时的发现\"></a> 一个在<em>明确自己努力方向时</em>的发现</h3>\n<p>在分析部分互联网大厂的JD时，我发现校招的任职要求更多指向<strong>计算机基础知识</strong>，而社招才更加注重<strong>工程或业务能力</strong>。那么我们不妨大胆推测——对于像我这样高考结束后才开始接触技术而缺乏技术沉淀的人，扎实的计算机基础或许才是更加稳妥的大厂敲门砖。</p>\n<p>同时，二者的侧重点的差异在学习规划（对症下药）上也是一个互补的参考：对于同类岗位，校招JD天然地适合用于基础学习的参考；而社招JD就适合工程/业务能力的学习规划以及相关项目的参考。</p>\n<p>另外，校招过程中HR似乎对学历的重视程度较高，对于我们这种 <s>建专</s> 水平较为一般的院校，在初筛就被投入“人（la）才（ji）库（tong）”的风险显然要比双一流与92高；又因为缺少技术沉淀的时间，想靠优秀项目破局的希望也很渺茫。这时就需要考虑是通过考研提升自己在学历上的竞争力、同时 <s>多走三五年的弯路</s> 为自己争取到多那么三五年的沉淀时间；还是通过竞赛奖项来破局。但想要在竞赛上获得比较明显的优势，往往需要花费大量的时间备战。这是一个值得思考与权衡的问题。</p>\n<h3 id=\"站点构建工具与主题的选择\"><a class=\"markdownIt-Anchor\" href=\"#站点构建工具与主题的选择\"></a> 站点构建工具与主题的选择</h3>\n<p>这是在通过搭建个人站点来整合信息时总结得出的经验，对于我这样的初学者也是一个容易走弯路的地方，我在这个地方至少“浪费”了近一个月的时间。</p>\n<p>长话短说，首先来看一些工具——我目前调研过的构建工具有四个：<a href=\"https://hugo.opendocs.io/\">Hugo</a>、<a href=\"https://hexo.io/zh-cn/\">Hexo</a>、<a href=\"https://squidfunk.github.io/mkdocs-material/\">Material for MkDocs</a>和<a href=\"https://vuepress.vuejs.org/zh/\">VuePress</a>，其中前面三个我都用过，第四个简单看了一下。</p>\n<p>我个人的建议是，针对<strong>博客</strong>等<strong>非信息密集型</strong>且<strong>注重美观</strong>的文档或站点，可以使用前两个构建；同时，Hexo会比Hugo更加成熟一些，大部分第三方主题对前者的支持会更好，但是容易出现依赖问题，且可能需要手动解决。因此建议小白用Hugo，有一定经验了再迁移到Hexo。</p>\n<p>而对于类似<strong>学习笔记</strong>这样<strong>结构复杂</strong>的<strong>信息密集型</strong>文档，建议使用Material for Mkdocs（一个基于<a href=\"https://www.mkdocs.org/\">Mkdocs</a>的<strong>主题</strong>，后面所提到的<a href=\"https://www.mkdocs.org/dev-guide/plugins/#developing-plugins\">支持PyPI集成</a>是指可利用其进行插件开发）。其社区支持十分完善，且支持<a href=\"https://pypi.org/project/mkdocs-material/\">PyPI集成</a>，可通过自行编写Python插件自定义样式。<a href=\"https://csdiy.wiki/\">csdiy</a>就是使用其构建的一个站点。</p>\n<p>VuePress我倒是没使用过，不过通过观察使用其构建的文档，我个人认为它适合用于构建结构相对没那么复杂的<strong>单主题</strong>的<strong>信息密集型</strong>文档，如某个中大型项目的使用文档。</p>\n<h2 id=\"新的开始\"><a class=\"markdownIt-Anchor\" href=\"#新的开始\"></a> 新的开始</h2>\n<p>新的学年，不出意外的话，我就是网安专业的学生了。<s>芜湖～水课水课逃逃逃！😋</s></p>\n<p>在大二，计算机的基础学习与竞赛或许会成为我的主旋律。在《葬送的芙莉莲》中，魔法使<a href=\"https://zh.moegirl.org.cn/%E5%85%B0%E6%89%98\">兰托</a>在一级魔法使选拔考试上曾对自己的对手说过这样一句话：<strong>大部分自学成才的人基础都不够扎实</strong>——希望能够成为剩下的那小部分人。</p>\n<p>对于基础学习，重点放在<strong>操作系统</strong>与<strong>计算机网络</strong>及二者的延伸内容（如分布式系统、并发等）上，最好能手搓一个内核和TCP/IP协议栈。我总有一种感觉，就是我目前的实际开发能力极其低下的一个很重要的原因就是对操作系统的原理几乎完全不了解。</p>\n<p>最好能把“程序员的三大浪漫”（操作系统、编译原理、计算机图形学）也过一遍。</p>\n<p>另外，在新的学年快要结束之际——明年的这个时候，需要根据基础学习的进度与状态决定<a href=\"#%E4%B8%80%E4%B8%AA%E5%9C%A8%E6%98%8E%E7%A1%AE%E8%87%AA%E5%B7%B1%E5%8A%AA%E5%8A%9B%E6%96%B9%E5%90%91%E6%97%B6%E7%9A%84%E5%8F%91%E7%8E%B0\">是否需要备战考研</a>，但要尽量避开这个方向——我是真的不太擅长考试且极度厌恶死记硬背。</p>\n<p>当然，工程/业务能力也要尽可能不落下，特别是这学期分外重视的<strong>项目标准化</strong>——当然，我这里想表达的东西或许还有一个更专业的术语——<strong>软件工程</strong>。</p>\n<hr />\n<p><em>END</em></p>\n<div style=\"text-align: right;\">\n  -- virtualguard101，2025.6.23凌晨于福建理工大学\n</div>\n",
            "tags": [
                "学年总结"
            ]
        },
        {
            "id": "http://blog.virtualguard101.xyz/2025/05/19/arch-linux/",
            "url": "http://blog.virtualguard101.xyz/2025/05/19/arch-linux/",
            "title": "Arch Linux安装要点记录",
            "date_published": "2025-05-19T00:52:48.000Z",
            "content_html": "<p><strong>记录一下在可移动设备/真机上安装和配置Arch Linux的过程安装过程中遇到的一些问题</strong></p>\n<p>Arch Linux是一个支持高度定制化的Linux发行版，其采用滚动更新的方式对系统进行更新，更新策略激进，适合愿意花时间在自己系统的计算机用户或喜欢折腾的计算机用户。</p>\n<p>这里需要特别说明一点，在安装之前，需要反思自己是否真的适合使用Arch！否则Arch的高度定制化与激进的更新策略将会使你陷入极大的麻烦！毕竟高度定制化的代价就是你需要为系统付出比其他稳定发行版多得多的时间去维护它。</p>\n<!-- more -->\n<h2 id=\"基本安装\"><a class=\"markdownIt-Anchor\" href=\"#基本安装\"></a> 基本安装</h2>\n<p>针对这部分内容，教程<a href=\"https://arch.icekylin.online/guide/\">Arch Guide | Nakano Miku</a>有详尽的阐述，包括从安装准备到系统美化的所有内容。</p>\n<p>这里记录几个我在真机安装过程中遇到的问题。</p>\n<h3 id=\"格式化efi分区前未备份原有系统启动引导双系统\"><a class=\"markdownIt-Anchor\" href=\"#格式化efi分区前未备份原有系统启动引导双系统\"></a> 格式化EFI分区前未备份原有系统启动引导（双系统）</h3>\n<p>我在安装过程中由于急于求成，在为EFI分区扩容时未备份原有系统（这里是Win11）的启动引导程序就直接将其格式化了，结果安装完Arch的基本系统才发现Win11进不去了…</p>\n<p>虽说安装前有备份Win11的系统映像，但为了一个EFI分区动用这个实属大材小用，因为基本数据的分区并没有任何问题。在这个问题上，我选择使用WinPE镜像系统对Win11的启动引导进行还原。只需准备一个装有WinPE镜像的U盘，启动进入WinPE，按照下图的提示，选择修<code>UEFI</code>引导进行修复即可：</p>\n<p><img src=\"https://i.imgur.com/8fTXOCP.jpeg\" alt=\"\" /></p>\n<h3 id=\"输入法异常\"><a class=\"markdownIt-Anchor\" href=\"#输入法异常\"></a> 输入法异常</h3>\n<p>这在教程<a href=\"https://arch.icekylin.online/guide/\">Arch Guide | Nakano Miku</a>有提示，（如果是按照此教程进行的安装）执行命令<code>fcitx5-diagnose</code>进行问题诊断并按照输出提示修复即可。</p>\n<h3 id=\"杂项\"><a class=\"markdownIt-Anchor\" href=\"#杂项\"></a> 杂项</h3>\n<p>关于桌面环境的选择，可以参考这篇文章：<a href=\"https://linuxiac.com/xorg-x11-wayland-linux-display-servers-and-protocols-explained/\">Xorg, X11, Wayland? Linux Display Servers And Protocols Explained<br />\n</a></p>\n<h2 id=\"在可移动设备安装\"><a class=\"markdownIt-Anchor\" href=\"#在可移动设备安装\"></a> 在可移动设备安装</h2>\n<p>该部分可参考<a href=\"https://b2og.com/archives/23\">将Arch Linux系统安装在可移动设备上的要点 | ToBeHonest’s BLOG</a>。</p>\n<p>第一次安装中，我就将Arch装在了一个256G、使用USB3.1的U盘上，同时由于使用<a href=\"https://arch.icekylin.online/guide/rookie/pre-virt.html\">虚拟机</a>运行安装镜像，所以并没有碰到什么大问题。</p>\n<hr />\n<p><strong>[参考文献]：</strong></p>\n<ul>\n<li>\n<p><a href=\"https://wiki.archlinuxcn.org/zh-sg/%E5%9C%A8%E5%8F%AF%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E4%B8%8A%E5%AE%89%E8%A3%85_Arch_Linux\">在可移动设备上安装 Arch Linux | Arch Wiki</a></p>\n</li>\n<li>\n<p><a href=\"https://b2og.com/archives/23\">将Arch Linux系统安装在可移动设备上的要点 | ToBeHonest’s BLOG</a></p>\n</li>\n<li>\n<p><a href=\"https://arch.icekylin.online/guide/\">Arch Guide | Nakano Miku</a></p>\n</li>\n<li>\n<p><a href=\"https://archlinuxstudio.github.io/ArchLinuxTutorial/#/\">ArchLinuxTutorial | Arch Linux Studio</a></p>\n</li>\n</ul>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "http://blog.virtualguard101.xyz/2025/04/26/web-build/",
            "url": "http://blog.virtualguard101.xyz/2025/04/26/web-build/",
            "title": "docker-compose + nginx快速构建个人站点",
            "date_published": "2025-04-26T15:28:57.000Z",
            "content_html": "<p><strong>本文主要讲解如何从零开始利用docker-compose + nginx快速构建一个个人站点；并利用Github Action实现文章部署自动化；最后是如何使用certbot为站点自动化申请ssl证书。整套配置流程做下来用时基本上不会超过3天</strong></p>\n<p>起因是我决定搭建一个个人站点用于模块化整合资源，在搜罗主页主题时因为部署简单相中了<a href=\"https://github.com/kasuie/remio-home\">remio-home | kasuie</a>，有多简单呢？简单到只需要进行一些及其简单的配置（cv大法可用）后，在服务器上输入一行<code>docker-compose up -d</code>即可。结合大佬的一些建议和我自己的一些 <s>偷懒</s> 自动化的想法，便有了下文。</p>\n<p>如题，本文主要讲解如何从零开始在一台云服务器上利用docker-compose + nginx快速构建一个个人站点。得益于强大的现代化工具链以及开源社区的支持，我们完成这个简易项目所需的计算机理论基础并不多，甚至可以说是几乎为零，只需要知道文档应该怎么读，如何正确打开开发中的“cv大法”来为自己的自动化工具链编写配置文件。当然，最好有一点web开发的基础，这样在遇到意料之外的问题时不至于束手无策。</p>\n<!-- more -->\n<p>通过该项目你会了解到以下内容：</p>\n<ul>\n<li><strong>1. 远程服务器的基础使用</strong></li>\n<li><strong>2. docker、docker-compose部署服务的基础操作</strong></li>\n<li><strong>3. web开发实现原理基础——静态资源部署</strong></li>\n<li><strong>4. hexo静态网页生成工具的使用</strong></li>\n<li><strong>5. Github Action配置自动化部署</strong></li>\n<li><strong>6. nginx基础配置（反向代理、二级域名）</strong></li>\n<li><strong>7. 在容器内使用certbot申请ssl证书，并通过定时任务自动化续签</strong></li>\n</ul>\n<p>下面是完成该项目所需的基础条件：</p>\n<ul>\n<li>一台服务器</li>\n<li>一个有效域名</li>\n</ul>\n<p><strong>服务器</strong>可在云服务器运营商处租用。国内比较可靠的运营商有阿里云、腾讯云等。</p>\n<p><strong>域名</strong>同样需要在运营商购买，也可通过特殊手段申请免费域名（不过免费申请的域名如有人出钱购买就会被回收）。获得域名后根据DNS云解析平台的文档进行解析配置即可。</p>\n<h2 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\"></a> 准备工作</h2>\n<h3 id=\"部署环境\"><a class=\"markdownIt-Anchor\" href=\"#部署环境\"></a> 部署环境</h3>\n<p>服务器的初始配置可参考这篇文章<a href=\"https://note.virtualguard101.xyz/notes/%E5%B7%A5%E5%85%B7/ssh/\">远程服务器的基础使用</a>，这里不再赘述。由于需要使用<code>docker</code>进行部署，我们需要先在服务器上安装一下docker。通过以下命令安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install docker-compose</span><br></pre></td></tr></table></figure>\n<p>将当前用户添加到docker用户组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> groupadd docker <span class=\"comment\"># 若尚不存在 docker 组，则需先创建</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> usermod -aG docker <span class=\"variable\">$USER</span></span><br></pre></td></tr></table></figure>\n<p>由于是通过容器部署服务，环境处于“隔离”状态，<code>nginx</code>无需下载安装，可通过镜像运行于容器中。</p>\n<h3 id=\"主页测试部署\"><a class=\"markdownIt-Anchor\" href=\"#主页测试部署\"></a> 主页测试部署</h3>\n<p>首先挑选一个能够使用docker部署的web主页，这里我们以<a href=\"https://github.com/kasuie/remio-home\">remio-home | kasuie</a>为例。根据文档进行配置与部署，部署完成后访问对应端口，观察配置是否生效。</p>\n<p>按照主题文档配置完<code>docker-compose.yml</code>后，将宿主机的端口改为80（http默认端口），<code>docker-compose down &amp;&amp; docker-compose up -d</code> 或 <code>docker-compose restart</code> 重启服务，通过外网设备进行访问，正常情况下和本地访问结果无异。也可通过端口转发在本地主机进行测试访问，具体这里不展开。</p>\n<p>在通过外网设备进行访问时，若先前配置了DNS云解析，可通过域名进行访问。</p>\n<h2 id=\"静态网页资源测试\"><a class=\"markdownIt-Anchor\" href=\"#静态网页资源测试\"></a> 静态网页资源测试</h2>\n<h3 id=\"hexo基础使用\"><a class=\"markdownIt-Anchor\" href=\"#hexo基础使用\"></a> hexo基础使用</h3>\n<p>互联网中有着数不胜数的静态网页生成工具，这里我们使用<a href=\"https://hexo.io/zh-cn/\">hexo</a>。</p>\n<p>首先进入<a href=\"https://hexo.io/themes/\">主题选择页</a>选择几个心仪的主题，随后根据主题文档和官方文档构建静态站点目录和安装依赖。然后还是各个配置文件的修改与测试，这个过程相对枯燥且繁琐。</p>\n<p>需要注意的是，有些主题在后面的部署过程中可能会出现各种各样的兼容性问题，遇到无法暂时解决的，可以更换主题。</p>\n<p>配置完主题后，通过<code>hexo s</code>命令测试生成静态网页，通过浏览器访问<code>localhost:4000</code>生成网页，查看是否符合预期。确认无误后，即可进入部署阶段。</p>\n<h2 id=\"部署\"><a class=\"markdownIt-Anchor\" href=\"#部署\"></a> 部署</h2>\n<h3 id=\"github-page-用户自定义域名\"><a class=\"markdownIt-Anchor\" href=\"#github-page-用户自定义域名\"></a> Github Page + 用户自定义域名</h3>\n<p>有Github Page静态网页部署经验的同志对此应该不陌生，配合hexo的<a href=\"https://hexo.io/zh-cn/docs/one-command-deployment\">一键部署</a>使用起来方便到不能再方便了，详情这里不再展开。针对此部署方法，就算不想看官方文档，网络上也有数不胜数的教程。</p>\n<p>这种部署方法固然方便，但只能部署（.github.io）或绑定到一个域名下（custom domain），若想要通过多个二级域名来分隔部署web资源，或是将来可能需要部署其他无法通过Github Page来部署的服务（如用户登陆服务、数据库服务等），这样的方法就会极大地限制web服务的可扩展性。简单来说，是否选择该部署方法取决于部署需求，确认只有存放静态资源的需求则该方法操作便捷且功能绰绰有余。</p>\n<h3 id=\"docker-compose-nginx\"><a class=\"markdownIt-Anchor\" href=\"#docker-compose-nginx\"></a> docker-compose + nginx</h3>\n<p>废话说了这么多，接下来正片开始。</p>\n<p>在现代 web 开发中，使用 Nginx 代理不同的子域名到相应的 web 项目是一个常见的需求。同时，为了使我们的web服务能够与使用docker容器部署的主页处于同一个服务端口上，我们就需要把处于不同容器的web服务通过docker-compose合成为一个，并映射到宿主机的80端口上以供外界访问。</p>\n<p>看上去很复杂，但事实上，由于我们并不需要了解容器内的服务具体在做些什么，理论上，我们只需要简单了解docker的工作原理以及<code>docker-compose.yml</code>和<code>nginx.conf</code>的配置规则即可实现前文提到的<strong>一键部署</strong>。</p>\n<p>当然，缺点也很明显：根域名（主页）和各二级域名（web服务）均需要通过nginx进行转发，且“处于一条绳上”，一旦nginx的配置或是其本身出现问题，所有写在配置里的服务就直接给一锅端了。</p>\n<p><s>当然这也契合部分人开（摸）发（鱼）习惯，很喜欢容器化开发者中流传的一句话：“我就喜欢配一天环境啥也不干的感觉☝🤓”</s></p>\n<p>两个配置文件的编写上，如果是单纯的多个二级域名的配置，网络上的教程一抓一大把，但我们的这个项目的难点就在于此，因为我们还要把先前就已成功部署的主页服务也融合进来，如何正确将它们配置到同一个端口上对于不熟悉docker和第一次接触nginx的人算的上是个挑战（比如我）。</p>\n<p>然而经过一段时间的尝试（AI+），我们就能发现这并非什么难事：</p>\n<h4 id=\"docker配置\"><a class=\"markdownIt-Anchor\" href=\"#docker配置\"></a> docker配置</h4>\n<p>以下配置模板仅供参考</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.8&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">remio-home:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">kasuie/remio-home</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">remio-home</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8080:3000&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">GTMID=.....</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASSWORD=.....</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">AMAP_KEY=.....</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./remio-home/config:/remio-home/config</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./remio-home/icons:/remio-home/public/icons</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./remio-home/fonts:/remio-home/public/fonts</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">web_network</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">nginx:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;80:80&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># - &quot;443:443&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./nginx/conf.d/nginx.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./nginx/log:/var/log/nginx</span></span><br><span class=\"line\">      <span class=\"comment\"># - ./certbot/www:/usr/share/certbot/www:ro</span></span><br><span class=\"line\">      <span class=\"comment\"># - ./certbot/ssl:/etc/letsencrypt:ro</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">subsite1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">subsite2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">subsite3</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">web_network</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span>  <span class=\"string\">nginx</span> <span class=\"string\">-g</span> <span class=\"string\">&#x27;daemon off;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># certbot:</span></span><br><span class=\"line\">  <span class=\"comment\">#   container_name: certbot</span></span><br><span class=\"line\">  <span class=\"comment\">#   image: certbot/certbot</span></span><br><span class=\"line\">  <span class=\"comment\">#   volumes:</span></span><br><span class=\"line\">  <span class=\"comment\">#     - ./certbot/www:/usr/share/certbot/www:rw #http验证目录，可设置rw可写，与nginx容器对应的宿主机目录时一致的</span></span><br><span class=\"line\">  <span class=\"comment\">#     - ./certbot/ssl:/etc/letsencrypt:rw #证书位置，同上，注意不要只映射到live，而是它的上一级</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">subsite1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">subsite1</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./sub-sites/subsite1/public:/usr/share/nginx/html</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">web_network</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">subsite2:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">subsite2</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./sub-sites/subsite2/public:/usr/share/nginx/html</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">web_network</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">subsite3:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">subsite3</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./sub-sites/subsite3/public:/usr/share/nginx/html</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">web_network</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">web_network:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">bridge</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>docker配置的关键在于<code>volumes</code>，即<strong>挂载卷</strong>的路径配置。</p>\n<p>在nginx附属服务（二级域名）的配置中，挂载卷参数的<code>:</code>前填入的是需要挂载的宿主机路径，<code>:</code>后是容器内的映射路径。这里我们需要挂载的路径是各个二级域名下需要“展示”的<strong>前端文件</strong>，即前文中提到的由静态网页生成工具生成的<strong>静态资源</strong>。</p>\n<p>在hexo中，我们通常使用命令<code>hexo cl &amp;&amp; hexo g</code>清理旧版本的静态文件并生成新版，生成的静态文件默认处于各项目根目录的<code>public</code>路径下。</p>\n<p>静态资源的整理可在任意主机上进行，部署时只需确保由静态网页生成的静态资源处于服务器上并挂载到容器的正确路径下即可。通常情况下，为确保隐私安全，静态文件的整理工作我们一般在本地主机上进行。在后续的章节中我们会介绍如何通过配置Github Action实现使静态文件从本地自动化部署至服务器上。</p>\n<h4 id=\"nginx配置\"><a class=\"markdownIt-Anchor\" href=\"#nginx配置\"></a> nginx配置</h4>\n<p><code>nginx.conf</code>的配置是该项目的核心，若出现错误导致部署无法进行，70%的问题出在nginx上，而nginx的问题有80%出在配置上（数据是瞎编的😋，但问题是真的）。</p>\n<p>以下是<code>nginx.conf</code>的参考配置，受限于篇幅，只列举主页及其中的一个二级域名的配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    ; server &#123;</span><br><span class=\"line\">    ;     listen 80;</span><br><span class=\"line\">    ;     # listen [::]:80;</span><br><span class=\"line\"></span><br><span class=\"line\">    ;     server_name  virtualguard101.xyz;#域名</span><br><span class=\"line\">    ;     server_tokens off;</span><br><span class=\"line\"></span><br><span class=\"line\">    ;     #配置http验证可访问</span><br><span class=\"line\">    ;     location /.well-known/acme-challenge/ &#123;</span><br><span class=\"line\">    ;         #此目录都是nginx容器内的目录，对应宿主机volumes中的http验证目录，而宿主机的又与certbot容器中命令--webroot-path指定目录一致，从而就整个串起来了，解决了http验证问题</span><br><span class=\"line\">    ;         root /usr/share/certbot/www;</span><br><span class=\"line\">    ;     &#125;</span><br><span class=\"line\">    ;     #http跳转到https</span><br><span class=\"line\">    ;     location / &#123;</span><br><span class=\"line\">    ;         return 301 https://$host$request_uri;</span><br><span class=\"line\">    ;     &#125;</span><br><span class=\"line\">    ; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name virtualguard101.xyz;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://remio-home:3000;</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">        &#125;       </span><br><span class=\"line\">        # 强制HTTPS重定向</span><br><span class=\"line\">        # return 301 https://$host$request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ; server &#123;</span><br><span class=\"line\">    ;     listen 443 ssl http2;</span><br><span class=\"line\">    ;     server_name virtualguard101.xyz;</span><br><span class=\"line\"></span><br><span class=\"line\">    ;     ssl_certificate /etc/letsencrypt/live/virtualguard101.xyz/fullchain.pem;</span><br><span class=\"line\">    ;     ssl_certificate_key /etc/letsencrypt/live/virtualguard101.xyz/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    ;     location / &#123;</span><br><span class=\"line\">    ;         proxy_pass http://remio-home:3000;</span><br><span class=\"line\">    ;         proxy_set_header Host $host;</span><br><span class=\"line\">    ;         proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">    ;         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    ;         proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">    ;     &#125;</span><br><span class=\"line\">    ; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ; server &#123;</span><br><span class=\"line\">    ;     listen 80;</span><br><span class=\"line\">    ;     # listen [::]:80;</span><br><span class=\"line\"></span><br><span class=\"line\">    ;     server_name  projects.virtualguard101.xyz;#域名</span><br><span class=\"line\">    ;     server_tokens off;</span><br><span class=\"line\"></span><br><span class=\"line\">    ;     #配置http验证可访问</span><br><span class=\"line\">    ;     location /.well-known/acme-challenge/ &#123;</span><br><span class=\"line\">    ;         #此目录都是nginx容器内的目录，对应宿主机volumes中的http验证目录，而宿主机的又与certbot容器中命令--webroot-path指定目录一致，从而就整个串起来了，解决了http验证问题</span><br><span class=\"line\">    ;         root /usr/share/certbot/www;</span><br><span class=\"line\">    ;     &#125;</span><br><span class=\"line\">    ;     #http跳转到https</span><br><span class=\"line\">    ;     location / &#123;</span><br><span class=\"line\">    ;         return 301 https://$host$request_uri;</span><br><span class=\"line\">    ;     &#125;</span><br><span class=\"line\">    ; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">        server_name projects.virtualguard101.xyz;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://projects:80;</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # return 301 https://$host$request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ;   server &#123;</span><br><span class=\"line\">  ;       listen 443 ssl http2;</span><br><span class=\"line\">  ;       server_name projects.virtualguard101.xyz;</span><br><span class=\"line\"></span><br><span class=\"line\">  ;       ssl_certificate /etc/letsencrypt/live/projects.virtualguard101.xyz/fullchain.pem;</span><br><span class=\"line\">  ;       ssl_certificate_key /etc/letsencrypt/live/projects.virtualguard101.xyz/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">  ;       location / &#123;</span><br><span class=\"line\">  ;           proxy_pass http://projects:80;</span><br><span class=\"line\">  ;           proxy_set_header Host $host;</span><br><span class=\"line\">  ;           proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">  ;           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">  ;           proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">  ;       &#125;</span><br><span class=\"line\">  ;   &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>nginx配置的关键在于反向代理转发的配置，这是nginx一个十分重要的特性，利用它能够实现nginx中许多核心功能，如负载均衡、websocket代理等。对于我们目前的项目需求，暂时无需使用到这些较为复杂的功能，我们现在只需弄明白参数<code>proxy_pass</code>具体是做什么的，以及其最为基础的配置规则，剩下的交给cv大法即可。</p>\n<p>在nginx配置中，<code>proxy_pass</code>用于将客户端的请求代理到指定的后段服务器，简单理解就是把请求作了一次转发。其基础语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /path/ &#123;</span><br><span class=\"line\">    proxy_pass http://backend_server:port;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该配置会将客户端上的请求转发至运行在<code>port</code>端口上名为<code>backend_server</code>的服务。结合上面的配置模板进行理解，我们可以发现主页服务在前面的docker配置中我们“恰好”将其配置在了容器的<code>3000</code>端口上，而其他的二级域名（nginx服务）我们均将其配置在了容器的<code>80</code>端口上，那么在外网设备（客户端）通过域名访问对应服务时，nginx就会将访问请求转发到对应的端口上。</p>\n<p>那么nginx怎么知道客户发送了访问请求？这就是<strong>监听</strong>要做的事。http服务默认通过<code>80</code>端口访问，通过配置<code>listen</code>参数我们可以使nginx服务监听<code>80</code>端口，就像饭点食堂阿姨站在特定窗口等着你去打饭一样。</p>\n<p>配置模板中注释掉的模块是https的配置，由于我们还未申请ssl证书，现在只能先使用http。关于ssl证书的申请我们也会在后续的章节介绍。</p>\n<p>docker 与 nginx的配置完成后，我们便可通过<code>docker-compose up -d</code>命令进行服务部署，此时正常情况下网页已经可以通过外网设备访问。若出现问题，一般情况下会反映在各个服务容器上，可通过<code>docker-compose logs</code>命令查看日志信息。</p>\n<h2 id=\"github-action自动化部署\"><a class=\"markdownIt-Anchor\" href=\"#github-action自动化部署\"></a> Github Action自动化部署</h2>\n<p><s>作为一个懒人</s>为了提高效率，写个自动化配置把部署的工作交给计算机来做自然是个不错的方法。Github Action为我们提供了一个简单的自动化构建平台，通过模块化的配置和与git远程仓库结合的管理方式极大简化了配置难度，同时集成了版本控制。</p>\n<p>Github Action自动化的配置通常位于子站点项目根目录的<code>.github/workflows</code>下。由于自动化部署的方式多种多样，配置自然也同理，故以下配置模板仅供参考。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"string\">Subsite</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [<span class=\"string\">main</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">hexo-build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"number\">18</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          npm install -g hexo-cli</span></span><br><span class=\"line\"><span class=\"string\">          npm install</span></span><br><span class=\"line\"><span class=\"string\"></span>        </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span> <span class=\"string\">Site</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">hexo</span> <span class=\"string\">clean</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">hexo</span> <span class=\"string\">generate</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"string\">to</span> <span class=\"string\">Server</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">appleboy/scp-action@v0.1.7</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">host:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.SERVER_IP</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.SERVER_USER</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.SSH_KEY</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">source:</span> <span class=\"string\">&quot;public/*&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">target:</span> <span class=\"string\">&quot;/home/&lt;user&gt;/sub-sites/&lt;subsites_dir&gt;/&quot;</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># - name: Refresh Nginx</span></span><br><span class=\"line\">      <span class=\"comment\">#   uses: appleboy/ssh-action@v1.0.0</span></span><br><span class=\"line\">      <span class=\"comment\">#   with:</span></span><br><span class=\"line\">      <span class=\"comment\">#     host: $&#123;&#123; secrets.SERVER_IP &#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\">#     username: $&#123;&#123; secrets.SERVER_USER &#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\">#     key: $&#123;&#123; secrets.SSH_KEY &#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\">#     script: |</span></span><br><span class=\"line\">      <span class=\"comment\">#       docker exec nginx_main nginx -s reload</span></span><br></pre></td></tr></table></figure>\n<p>配置模板中，<code>Deploy to Server</code>模块是配置中较为核心的模块。该模块利用<strong>scp</strong>工具将生成的静态文件传送至站点服务器的指定路径下，其中的以<code>secrets</code>开头的三个变量分别是服务器的ip地址、用户与ssh私钥，通过仓库的<code>settings</code> &gt;&gt; <code>secrets and variables</code> &gt;&gt; <code>actions</code> 配置。<br />\nssh私钥需在服务器上生成。</p>\n<p>通过上述自动化配置，在每次我们将本地仓库的更改推送至远程仓库时，github会自动在后台使用hexo生成静态文件，并通过scp将其发送至服务器的指定路径下。</p>\n<p>至此，我们仅需在本地的各个站点项目路径下修改配置或撰写文章，并将更改推送至github远程仓库，即可实现站点资源的自动化部署。</p>\n<h2 id=\"ssl认证与https模块配置可选\"><a class=\"markdownIt-Anchor\" href=\"#ssl认证与https模块配置可选\"></a> ssl认证与https模块配置（可选）</h2>\n<p>经过上面五节的配置工作，我们的站点的雏形已经完成，接下来就是最后的收尾工作。关于ssl证书与https，尽管我们并不认为它是一个网页的必要组成部分，但我们还是强烈建议为自己的站点配置ssl证书与https模块以增强安全性与可扩展性。得益于<a href=\"https://certbot.eff.org/\">certbot</a>的ssl证书免费申请功能，我们已经能够较为容易地完成这项工作。</p>\n<h3 id=\"首次申请ssl证书\"><a class=\"markdownIt-Anchor\" href=\"#首次申请ssl证书\"></a> 首次申请ssl证书</h3>\n<p>由于在该项目中，我们所有的服务均配置于docker容器中，因此我们同样需要将certbot的服务功能配置进docker-compose.yml中以实现后续的ssl证书自动化续签。事实上，certbot官方是不建议使用docker作为certbot的服务载体的，详情可参考<a href=\"https://eff-certbot.readthedocs.io/en/stable/install.html#alternative-1-docker\">Get Certbot with Docker</a></p>\n<p>在配置前，首先需要拉取certbot的docker镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull certbot/certbot</span><br></pre></td></tr></table></figure>\n<p>随后将前文中<code>docker-compose.yml</code>中<code>certbot</code>模块的注释去掉，并将nginx挂载卷中有关certbot的路径的注释去掉。启动服务，并通过以下命令进行测试申请：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># --dry-run是只测试不实际生成; --webroot-path对应着certbot内的http验证目录;-d后面是域名;--rm是运行后接着删除，certbot容器不需要一直开启，只是启动下生成证书即可</span></span><br><span class=\"line\">docker compose run --<span class=\"built_in\">rm</span>  certbot certonly --webroot --webroot-path /usr/share/certbot/www/ --dry-run -d [your_domain]</span><br></pre></td></tr></table></figure>\n<p>按照提示输入邮箱信息，若返回结果<code>The dry run was successful</code>，则说明测试成功，即可将<code>--dry-run</code>去掉以进行实际的证书获取：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose run --<span class=\"built_in\">rm</span>  certbot certonly --webroot --webroot-path /usr/share/certbot/www/ -d [your_domain]</span><br></pre></td></tr></table></figure>\n<p>申请成功后，可通过以下命令查看所有已申请的证书：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose run --<span class=\"built_in\">rm</span> certbot certificats</span><br></pre></td></tr></table></figure>\n<p>确认证书信息无误后即可开始nginx<code>https</code>模块的配置。与<code>docker-compose.yml</code>类似，将<code>nginx.conf</code>配置模板中https模块的注释去掉，同时将原来未注释的http模块注释掉，<code>docker-compose down &amp;&amp; docker-compose up -d</code>重启服务。完成后通过外网设备访问网页，正常情况下，网址栏会显示该网页是安全的。</p>\n<h3 id=\"ssl证书自动化续签\"><a class=\"markdownIt-Anchor\" href=\"#ssl证书自动化续签\"></a> ssl证书自动化续签</h3>\n<p>使用certbot一个很大的原因就是因为其可通过配置<strong>定时任务</strong>进行ssl证书的自动化续签。具体配置十分简单，一个bash的问题：</p>\n<p>创建bash脚本，并写入定时申请命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim sslrenew.sh   <span class=\"comment\"># 创建脚本文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入命令</span></span><br><span class=\"line\">docker compose run certbot renew</span><br></pre></td></tr></table></figure>\n<p><code>crontab -e</code>添加定时任务，每个月第一天凌晨四点执行，也可根据自己情况进行配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 4 1 * * ~/sslrenew.sh</span><br></pre></td></tr></table></figure>\n<p>配置完成后，可通过<code>crontab -l</code>命令查看配置的定时命令，确认配置是否写入。</p>\n<p><strong>BASE END</strong></p>\n<p>到此为止，所有的基础配置也就完成了。此时我们的个人站点已经可以被世界上所有接入互联网的设备访问了，同时我们也可根据个人需求为站点添加各种各样的功能与服务。</p>\n<p>主要参考文献：</p>\n<ul>\n<li><a href=\"https://cloud.tsyidc.com/web/822.html\">docker部署nginx多级子域名 | 蓝易云</a></li>\n<li><a href=\"https://www.cnblogs.com/vishun/p/15746849.html\">docker部署certbot与nginx来获取ssl证书添加https及自动更新 | vishun</a></li>\n<li><a href=\"https://kasuie.cc/article/22\">使用Certbot自签SSL证书 | kasuie</a></li>\n</ul>\n<hr />\n<h2 id=\"增添服务\"><a class=\"markdownIt-Anchor\" href=\"#增添服务\"></a> 增添服务</h2>\n<p>既然我们都选择了使用云服务器来构建我们的个人站点，那么仅使用它来存放静态页面显然是大材小用。对于站点功能的丰富，还是那句话，在成熟工具链丰富的现代开发环境下，并不是什么很难的事情。很多时候，我们只需要正确打开别人写好的文档即可。</p>\n<p>对于功能扩展这部分的内容，更多的还是将目光放在部署工具供应者的使用文档上，这里只基于该文介绍的站点部署方法简单介绍一下我个人摸索出的<strong>标准化部署流程</strong>以及部署过程中可能碰到的<strong>问题</strong>。</p>\n<h3 id=\"标准化部署流程\"><a class=\"markdownIt-Anchor\" href=\"#标准化部署流程\"></a> 标准化部署流程</h3>\n<p>以下流程为个人在实际部署过程中摸索出的不同服务部署过程的共通点，仅供参考。</p>\n<p>现在，假设我们想要在服务器上部署一个AI对话服务，那么我们便可遵循以下流程进行服务的配置及部署：</p>\n<h4 id=\"一-工具链选取及基础配置工作\"><a class=\"markdownIt-Anchor\" href=\"#一-工具链选取及基础配置工作\"></a> 一、工具链选取及基础配置工作</h4>\n<ul>\n<li><strong>0. 选取对应的服务部署工具链，查阅官方文档并结合当前环境分析部署可行性。</strong></li>\n</ul>\n<p>我们想要在服务器上部署一个AI对话服务，那么结合当前部署环境，我们就应该在网络上查找对应的<code>docker</code>镜像（image）。这里我们使用<a href=\"https://github.com/SillyTavern/SillyTavern\">LLM Frontend | SillyTavern</a>进行部署。</p>\n<p>该框架具有docker镜像，且支持使用docker-compose部署，符合当前的环境要求，且部署难度和成本相对较低。</p>\n<ul>\n<li><strong>1. 拉取docker镜像（可跳过）</strong></li>\n</ul>\n<p>执行以下命令以获取待部署的docker镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ghcr.io/sillytavern/sillytavern:latest</span><br></pre></td></tr></table></figure>\n<p>在使用docker-compose进行部署时，若<code>docker-compose.yml</code>配置无误，镜像会自动拉取。执行这一步主要是为了提前判定镜像是否处于可获取的状态。</p>\n<ul>\n<li><strong>2. 根据工具文档及个人需求进行配置文件的配置或修改</strong></li>\n</ul>\n<p>项目主页：<a href=\"https://sillytavern.app/\">SillyTavern - LLM Frontend for Power User</a><br />\n项目仓库：<a href=\"https://github.com/SillyTavern/SillyTavern\">SillyTavern</a></p>\n<h4 id=\"二-docker-composeyml配置\"><a class=\"markdownIt-Anchor\" href=\"#二-docker-composeyml配置\"></a> 二、docker-compose.yml配置</h4>\n<p>由于docker的容器环境是我们站点的部署基础，这部分的配置便显得尤为重要。可参考以下步骤进行配置：</p>\n<ul>\n<li><strong>1. 依照文档给出的配置框架结合部署环境进行基础配置</strong></li>\n</ul>\n<p>官方给出的<code>docker-compose.yml</code>如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">sillytavern:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">..</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">sillytavern</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">sillytavern</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">ghcr.io/sillytavern/sillytavern:latest</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">NODE_ENV=production</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">FORCE_COLOR=1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:8000&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;./config:/home/node/app/config&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;./data:/home/node/app/data&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;./plugins:/home/node/app/plugins&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;./extensions:/home/node/app/public/scripts/extensions/third-party&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br></pre></td></tr></table></figure>\n<p>我们可结合部署环境与部署需求对<code>environment</code>、<code>volumes</code>、<code>port</code>中的值进行修改，同时还需注意<code>docker-compose.yml</code>与服务自身配置（<code>config.yaml</code>）的对应关系。比如，针对<code>port</code>参数，<code>config.yaml</code>中默认将服务映射在<code>8000</code>端口上，若两个配置不对应，在访问时就会遇到<code>502(Bad Gateway)</code>错误。</p>\n<p>还有一点需要注意：由于nginx服务也运行于容器中，故在此项目的实际配置与部署过程中，真正有效的端口参数是<code>port</code>参数的<strong>容器服务端口</strong>。</p>\n<ul>\n<li><strong>2. 网络关系配置</strong></li>\n</ul>\n<p>容器化技术的一大亮点在于不同服务容器环境相互独立的情况下也可通过形形色色的配置建立起各个容器间的联系。配置这些东西过程被厌恶容器技术的人所诟病，这些人认为该过程徒增工作复杂度，殊不知这是被他们所忽略的本职工作。</p>\n<p>服务间网络关系的配置也是上述关系配置中的一环，通过前文的配置我们知道，各个服务的网络配置通过<code>networks</code>参数控制，而在该项目中我们统一使用<code>web_network</code>作为各个服务的网络配置参数。故在官方文档原有框架的基础上，我们需要为模块追加如下配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">web_network</span></span><br></pre></td></tr></table></figure>\n<!-- 否则会导致sillytavern容器未连接到web_network网络，出现容器错误 -->\n<ul>\n<li><strong>3. 服务依赖关系</strong></li>\n</ul>\n<p>和网络关系相比，不同服务的依赖关系在体现各个服务容器之间的联系上更加直接。</p>\n<p>在本项目中，由于需要使用nginx对各个服务进行转发，依赖关系便体现在各个部署在二级域名上的服务与nginx服务上。完成<code>sillytavern</code>服务的配置后，我们需要在nginx模块的<code>depend_on</code>参数追加如下配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">depend_on:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">.....</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">sillytavern</span></span><br></pre></td></tr></table></figure>\n<!--显式声明容器依赖关系，确保sillytavern先于nginx启动，否则会出现nginx容器错误 -->\n<h4 id=\"三-nginx-https模块配置\"><a class=\"markdownIt-Anchor\" href=\"#三-nginx-https模块配置\"></a> 三、nginx-https模块配置</h4>\n<ul>\n<li><strong>1. 反向代理基础配置（http模块）</strong></li>\n</ul>\n<p>依照前文基础配置的<code>nginx.conf</code>模板进行修改即可。</p>\n<ul>\n<li><strong>2. ssl证书申请及https模块配置</strong></li>\n</ul>\n<p>遵循<code>复制模板</code>-<code>注释</code>-<code>解除注释</code>-<code>申请</code>-<code>解除注释</code>的“五步原则”。注释及解除注释操作的对应模块如下：</p>\n<p><strong>注释</strong>：注释<strong>http反向代理模块</strong><br />\n<strong>第一次解除注释</strong>：解除<strong>http ACME验证挑战模块</strong>注释<br />\n<strong>第二次解除注释</strong>：解除<strong>https反向代理模块</strong>注释</p>\n<hr />\n<p>完成以上三大步，8小步的配置与部署操作，部署工作基本也就完成了。</p>\n<h2 id=\"常见问题\"><a class=\"markdownIt-Anchor\" href=\"#常见问题\"></a> 常见问题</h2>\n<p>部署过程中经常会碰到一些奇奇怪怪的问题，特别是不熟悉docker、nginx配置规则的初学者。下面是我在部署过程中遇到的问题的汇总。</p>\n<h3 id=\"nginx错误-服务访问错误\"><a class=\"markdownIt-Anchor\" href=\"#nginx错误-服务访问错误\"></a> nginx错误、服务访问错误</h3>\n<p>通常表现为nginx容器无法正常运行，网页访问<code>500</code>、网页访问<code>502</code>等，具体原因可能有如下几种：</p>\n<ul>\n<li><code>nginx.conf</code>配置错误</li>\n</ul>\n<p>通常是反向代理模块中<code>proxy_pass</code>参数的配置有误，比如后端服务的<strong>端口</strong>或<strong>服务名称</strong>与<code>docker-compose.yml</code>中配置的不对应。</p>\n<ul>\n<li><code>docker-compose.yml</code>配置错误</li>\n</ul>\n<p>通常是前文提到的不同容器间关系的配置有误或者缺失，特别是nginx服务与其他需要通过nginx服务进行转发的服务之间的关系。如<code>networks</code>配置、容器依赖关系配置；以及前文提到的服务配置与docker-compose配置的对应关系问题，如服务端口的对应问题。</p>\n<h3 id=\"ssl证书申请certbot错误\"><a class=\"markdownIt-Anchor\" href=\"#ssl证书申请certbot错误\"></a> ssl证书申请（certbot）错误</h3>\n<p>通常表现为无法申请ssl证书、申请证书后访问显示“<s>https</s>网页不安全”等，具体原因可能有如下几种：</p>\n<ul>\n<li>无法申请ssl证书（certbot无法正常运行）</li>\n</ul>\n<p><strong>1. 同一域名在短时间内申请次数过多</strong></p>\n<p><strong>2. <code>nginx.conf</code>中http ACME验证挑战模块配置有误</strong></p>\n<p><strong>3. 在特殊环境（如需要进行用户验证）下未注释http反向代理模块导致无法访问服务的问题（如<code>401</code>）</strong></p>\n<p><strong>4. 域名本身无法正常访问（<code>5xx</code>、<code>4xx</code>）</strong></p>\n<ul>\n<li>访问问题（提示网站不安全）</li>\n</ul>\n<p><strong>1. 申请ssl证书时信息有误，如二级域名名称错误</strong></p>\n<p><strong>2. <code>nginx.conf</code>中https模块二级域名（server_name）配置有误</strong></p>\n<p><strong>3. <code>nginx.conf</code>中https模块证书路径有误</strong></p>\n<p>关键在与证书与域名的对应关系是否有误。</p>\n<hr />\n<p><strong>END</strong></p>\n",
            "tags": [
                "web开发",
                "docker"
            ]
        },
        {
            "id": "http://blog.virtualguard101.xyz/2025/03/10/Hello/",
            "url": "http://blog.virtualguard101.xyz/2025/03/10/Hello/",
            "title": "Hello :)",
            "date_published": "2025-03-09T18:09:15.000Z",
            "content_html": "<p>This is the first content for my blog 😃 <br></p>\n<p><img src=\"https://butterblock233.github.io/posts/images/Hello.gif\" alt=\"Hello\" /> <br></p>\n<p>GIF source: <a href=\"https://dribbble.com/shots/17347386-Hello-Apple\">Hello Apple by Meritt Thomas</a> <br></p>\n",
            "tags": []
        }
    ]
}