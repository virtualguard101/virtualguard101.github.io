{
    "version": "https://jsonfeed.org/version/1",
    "title": "virtualguard's Blog • All posts by \"c++\" tag",
    "description": "</>",
    "home_page_url": "http://blog.virtualguard101.xyz",
    "items": [
        {
            "id": "http://blog.virtualguard101.xyz/2025/05/23/3BodySimulator/",
            "url": "http://blog.virtualguard101.xyz/2025/05/23/3BodySimulator/",
            "title": "3BodySimulator：Python & C++ 项目标准化构建",
            "date_published": "2025-05-23T06:18:21.000Z",
            "content_html": "<h2 id=\"导言\"><a class=\"markdownIt-Anchor\" href=\"#导言\"></a> 导言</h2>\n<p>近期刚刚结束<a href=\"https://web.stanford.edu/class/cs106l/\">CS106L | Standard C++ features and syntax</a>的学习，想借此机会完善一下对C++项目构建的学习，如<code>CMake</code>等构建工具的使用，故立此项。</p>\n<p>通过本次项目你会了解到：</p>\n<ul>\n<li>\n<ol>\n<li>C++项目标准化基础</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li><code>CMake</code>、<code>vcpkg</code>等C++构建工具的基本使用</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>多语言配合构建（C++ &amp; Python）</li>\n</ol>\n</li>\n</ul>\n<p>下面是完成此次项目所需的基本条件：</p>\n<ul>\n<li>\n<p>C++ 编译器</p>\n</li>\n<li>\n<p><a href=\"https://git-scm.com/\">Git</a>：版本控制</p>\n</li>\n<li>\n<p><a href=\"https://cmake.org/documentation/\">CMake(<em>&gt;= v3.22</em>)</a>：C++构建工具</p>\n</li>\n<li>\n<p><a href=\"https://learn.microsoft.com/zh-cn/vcpkg/\">vcpkg</a>：C++包管理工具</p>\n</li>\n<li>\n<p><a href=\"https://www.python.org/\">Python(<em>&gt;= v3.12</em>)</a>：可视化模块</p>\n</li>\n<li>\n<p><a href=\"https://docs.astral.sh/uv/\">uv</a>：Python包管理工具</p>\n</li>\n</ul>\n<p>文中的构建平台为<strong>Ubuntu22.04</strong></p>\n<p>此次项目注重C++项目的标准化以及构建工具（<code>vcpkg</code>、<code>CMake</code>）的使用，代码逻辑部分主体由<code>DeepSeek</code>、<code>ChatGPT</code>等AI大模型完成。</p>\n<ul>\n<li>项目仓库：<a href=\"https://github.com/virtualguard101/3BodySimulator\">3BodySimulator</a></li>\n</ul>\n<h2 id=\"初始化项目\"><a class=\"markdownIt-Anchor\" href=\"#初始化项目\"></a> 初始化项目</h2>\n<p>首先使用两个语言的包管理器分别对项目进行初始化：</p>\n<h3 id=\"vcpkg\"><a class=\"markdownIt-Anchor\" href=\"#vcpkg\"></a> <code>vcpkg</code></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vcpkg new --application</span><br></pre></td></tr></table></figure>\n<p>对生成的<code>vcpkg.json</code>进行配置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;three-body-simulator&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version-string&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;dependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;python3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;version&gt;=&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;3.12.9&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;pybind11&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;builtin-baseline&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;a337f5fe100f83026072765ea63a8776f984f6fd&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意所有键值对的内容只能包含<strong>小写字母</strong>，否则后续构建时会报错。</p>\n</blockquote>\n<h3 id=\"uv\"><a class=\"markdownIt-Anchor\" href=\"#uv\"></a> <code>uv</code></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uv init</span><br></pre></td></tr></table></figure>\n<p>将项目信息写入<code>pyproject.toml</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[project]</span><br><span class=\"line\">name = <span class=\"string\">&quot;3BodySimulator&quot;</span></span><br><span class=\"line\">version = <span class=\"string\">&quot;0.1.0&quot;</span></span><br><span class=\"line\">description = <span class=\"string\">&quot;The visualization simulation of three-body motion implemented using C++ &amp; Python.&quot;</span></span><br><span class=\"line\">readme = <span class=\"string\">&quot;README.md&quot;</span></span><br><span class=\"line\">requires-python = <span class=\"string\">&quot;&gt;=3.12&quot;</span></span><br><span class=\"line\">dependencies = [</span><br><span class=\"line\">    <span class=\"string\">&quot;matplotlib&gt;=3.8.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;ninja&gt;=1.11.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;numpy&gt;=1.26.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;pybind11&gt;=2.11.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;pygame&gt;=2.6.1&quot;</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>随后去除无用的生成配置即可。</p>\n<p>随后对项目结构初始化：</p>\n<h3 id=\"项目结构\"><a class=\"markdownIt-Anchor\" href=\"#项目结构\"></a> 项目结构</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── build.sh              <span class=\"comment\"># build shell script</span></span><br><span class=\"line\">├── CMakeLists.txt        <span class=\"comment\"># CMake build config(outer)</span></span><br><span class=\"line\">├── CMakePresets.json     <span class=\"comment\"># vcpkg CMake toolchain config(public)</span></span><br><span class=\"line\">├── CMakeUserPresets.json <span class=\"comment\"># vcpkg CMake toolchain config(private)</span></span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── pyproject.toml        <span class=\"comment\"># Python project config</span></span><br><span class=\"line\">├── python                <span class=\"comment\"># Python script folder</span></span><br><span class=\"line\">│   ├── dynamic.py</span><br><span class=\"line\">│   ├── example.json      <span class=\"comment\"># example input json data</span></span><br><span class=\"line\">│   ├── pyonly.py</span><br><span class=\"line\">│   └── visualize.py</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── requirements.txt      <span class=\"comment\"># Python dependencies</span></span><br><span class=\"line\">├── src                   <span class=\"comment\"># C++ source folder</span></span><br><span class=\"line\">│   ├── CMakeLists.txt    <span class=\"comment\"># CMake build config(inner)</span></span><br><span class=\"line\">│   ├── three_body.cpp</span><br><span class=\"line\">│   └── three_body.h</span><br><span class=\"line\">├── uv.lock</span><br><span class=\"line\">├── vcpkg-configuration.json</span><br><span class=\"line\">└── vcpkg.json            <span class=\"comment\"># vcpkg dependencies config</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h2>\n<p>这部分并不是我们本次项目的重点，故使用了大语言模型（<a href=\"https://chatgpt.com/\">chatGPT</a>）负责该部分的实现与完善。<s>绝对不是我想偷懒😋</s></p>\n<p>其中采用的技术栈在项目的<a href=\"https://github.com/virtualguard101/3BodySimulator?tab=readme-ov-file#tech-stack-in-this-project\">README</a>中有详细的总结。后续会视情况完善对这一部分的学习和解构。</p>\n<p>在实现的代码源文件中，我们使用C++作为<strong>底层物理引擎</strong>的构建语言，使用Python作为<strong>主程序语言</strong>并负责<strong>可视化与用户交互</strong>。二者的源文件分别位于项目根目录的<code>src</code>和<code>python</code>文件夹下。</p>\n<h2 id=\"项目构建\"><a class=\"markdownIt-Anchor\" href=\"#项目构建\"></a> 项目构建</h2>\n<p>接下来进入本项目的重点。</p>\n<p>创建本次项目的主要目的是为学习<strong>CMake</strong>和<strong>vcpkg</strong>的基本使用，故将项目构建配置的部分视为重点。</p>\n<p>本项目使用<code>CMake</code> &amp; <code>vcpkg</code>工具链进行C++的构建，使用<code>uv</code>进行Python的依赖与项目管理，可遵循『<strong>获取依赖→配置→编译→虚拟环境运行</strong>』的流程对项目进行构建与测试运行：</p>\n<h3 id=\"获取依赖\"><a class=\"markdownIt-Anchor\" href=\"#获取依赖\"></a> 获取依赖</h3>\n<p>类似Python的<code>pip</code>，<code>vcpkg</code>是一个相对简单易用的cpp包管理工具（虽然但是各种配置还是让人用的很难受🙃，毕竟C++的生态就这样），在该项目中，我们将使用它相对容易地获取项目所需的相关依赖。</p>\n<p>安装就不再赘述，详情参考<a href=\"https://learn.microsoft.com/zh-cn/vcpkg/\">官方文档</a>，注意记住自己安装的路径，以便后续工具链的配置。</p>\n<ul>\n<li>编辑依赖列表</li>\n</ul>\n<p>在本项目中，我们选择使用C++配合Python完成模拟实现。chatGPT给出的实现思路是<strong>使用cpp实现天体运动的底层物理引擎，构建输出一个Python可直接调用的共享库（<code>.so</code>/<code>.pyd</code>），然后由Python在可视化实现中直接调用</strong>。</p>\n<p>因此，在C++模块的实现中，我们需要使用<a href=\"https://pybind11.readthedocs.io/en/stable/basics.html\">pybind11</a>联系二者。</p>\n<blockquote>\n<p><code>pybind11</code>是一个轻量级的库，用于将C++代码绑定到Python中，使得Python能够调用cpp的高性能代码。</p>\n</blockquote>\n<p>为了引入<code>pybind11</code>，我们就需要通过配置<code>vcpkg.json</code>的依赖列表使得后续运行构建时能够导入它。</p>\n<p>在<strong>初始化项目</strong>的过程中，我们已经对<code>vcpkg.json</code>进行了配置。是的，那就是所谓的<strong>依赖列表</strong>。根据<a href=\"https://learn.microsoft.com/zh-cn/vcpkg/get_started/get-started?pivots=shell-bash#3---add-dependencies-and-project-files\">官方文档</a>的描述，也可通过<code>port</code>命令添加依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vcpkg add port pybind11</span><br></pre></td></tr></table></figure>\n<h3 id=\"构建配置\"><a class=\"markdownIt-Anchor\" href=\"#构建配置\"></a> 构建配置</h3>\n<p>这是该项目中最为重要的一步，主要的工作简单来说就是配置<code>CMakeLists.txt</code>。</p>\n<p>由于我们使用了第三方工具<code>vcpkg</code>作为包管理工具，合理配置这二者之间的工具链关系就尤为关键。</p>\n<p>我们配置的思路是，在项目的根目录和用于存放C++模块的<code>src</code>中分别创建一个<code>CMakeLists.txt</code>。前者用于配置CMake在构建过程中与vcpkg的工具链参数；后者则专门用于配置cpp模块的构建逻辑。</p>\n<p>由此便有了以下配置：</p>\n<p><code>CMakeLists.txt</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目基本参数</span></span><br><span class=\"line\">cmake_minimum_required(VERSION 3.20)</span><br><span class=\"line\">project(3BodySimulator LANGUAGES CXX)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 vcpkg 的 Toolchain</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(NOT DEFINED CMAKE_TOOLCHAIN_FILE)</span><br><span class=\"line\">  <span class=\"built_in\">set</span>(</span><br><span class=\"line\">    CMAKE_TOOLCHAIN_FILE <span class=\"string\">&quot;~/vcpkg/scripts/buildsystems/vcpkg.cmake&quot;</span></span><br><span class=\"line\">    DPython3_EXECUTABLE=$(<span class=\"built_in\">which</span> python)</span><br><span class=\"line\">    DCMAKE_BUILD_TYPE=Release</span><br><span class=\"line\">    CACHE STRING <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">endif()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把 src 子目录加入构建</span></span><br><span class=\"line\">add_subdirectory(src)</span><br></pre></td></tr></table></figure>\n<p><code>src/CMakeLists.txt</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找 pybind11（由 vcpkg 安装并集成）</span></span><br><span class=\"line\">find_package(pybind11 CONFIG REQUIRED)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 源文件列表</span></span><br><span class=\"line\">pybind11_add_module(three_body</span><br><span class=\"line\">  three_body.cpp</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置头文件路径</span></span><br><span class=\"line\">target_include_directories(three_body</span><br><span class=\"line\">  PRIVATE <span class=\"variable\">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 C++17 标准</span></span><br><span class=\"line\">target_compile_features(three_body PUBLIC cxx_std_17)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把生成的共享库 (.so/.pyd) 放到 ../python 目录</span></span><br><span class=\"line\">set_target_properties(three_body PROPERTIES</span><br><span class=\"line\">  LIBRARY_OUTPUT_DIRECTORY <span class=\"variable\">$&#123;CMAKE_SOURCE_DIR&#125;</span>/python</span><br><span class=\"line\">  OUTPUT_NAME <span class=\"string\">&quot;three_body&quot;</span>    <span class=\"comment\"># 忽略 ABI tag，统一输出 three_body.so</span></span><br><span class=\"line\">  PREFIX <span class=\"string\">&quot;&quot;</span>                   <span class=\"comment\"># 无前缀</span></span><br><span class=\"line\">  SUFFIX <span class=\"string\">&quot;.so&quot;</span>                <span class=\"comment\"># 强制后缀 .so</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>正常情况下，按照以上构建配置，只需执行如下命令即可进行C++模块的构建生成与编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置生成</span></span><br><span class=\"line\">cmake --preset=vcpkg</span><br><span class=\"line\"><span class=\"comment\"># 编译生成.so</span></span><br><span class=\"line\">cmake --build build/</span><br></pre></td></tr></table></figure>\n<p>如果不出意外的话，cmake会在<code>python</code>路径下生成一个名为<code>three_body</code>的<code>.so</code>共享库（为了方便调用，故将共享库生成到与py脚本相同的目录下）。事实上，到这里，我们的项目就可以直接通过<code>python</code>命令直接运行了（当然，前提是你的Python依赖没有问题）。</p>\n<p><s>uv：世界，遗忘我…🙃</s></p>\n<h3 id=\"uvpython虚拟环境配置\"><a class=\"markdownIt-Anchor\" href=\"#uvpython虚拟环境配置\"></a> <code>uv</code>Python虚拟环境配置</h3>\n<p>虽然完成了C++模块的构建工作基本就意味着项目能够跑起来了，但Python混乱的环境依赖问题在某些时候是出了名的让人头痛。为了避免这一情况，我们需要创建一个虚拟环境来运行我们的项目，为此，我们选择了<a href=\"https://docs.astral.sh/uv/\">uv</a>作为该项目的Python包管理器。</p>\n<blockquote>\n<p><code>uv</code>是一个由<code>Rust</code>编写的高性能Python包管理工具，其安装速度比传统工具要快上不少，同时还支持并行安装。</p>\n<p>更重要的是，它提供了一种十分便捷和强大的<strong>项目依赖管理</strong>与<strong>虚拟环境管理</strong>方式。</p>\n</blockquote>\n<p>在初始化项目的过程中，我们已经使用其进行了项目信息的初始化配置，接下来，我们将继续使用它轻松地配置和运行我们的项目：</p>\n<ul>\n<li>创建Python虚拟环境并激活</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uv venv .venv         <span class=\"comment\"># 默认为系统 Python3.12</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> .venv/bin/activate</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在虚拟环境中安装依赖</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uv pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<p>安装好依赖后，我们就可以在虚拟环境中完美地运行我们的项目了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uv run python/dynaminc.py</span><br></pre></td></tr></table></figure>\n<h3 id=\"自动化构建脚本\"><a class=\"markdownIt-Anchor\" href=\"#自动化构建脚本\"></a> 自动化构建脚本</h3>\n<p>说了这么一堆，有人可能要问了：这么多的构建命令，还挺麻烦的，而且如果不小心搞乱了不就完犊子了？难道就没有方便的构建方式吗？</p>\n<p>有的兄弟，有的。</p>\n<p>事实上，我们上面讲解的构建顺序本身就有点问题：</p>\n<p>如果观察仔细的话，应该会注意到，前文中根目录下的<code>CMakeLists.txt</code>中在配置工具链时指定了一个名为<code>DPython3_EXECUTABLE</code>的参数，这个参数的功能是显式指定运行Python脚本的Python解释器，作用是强制保持运行环境的Python版本一致性。如果你在系统上使用与<code>uv</code>配置中Python版本不一致的解释器，且没有在构建C++模块前创建并激活Python虚拟环境，那么你在尝试运行项目时就会得到类似下面的报错信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;/home/virtualguard/projects/researching/cpp-engine/3BodySimulator/python/visualize.py&quot;</span>, line 11, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    from three_body import Body, step</span><br><span class=\"line\">ImportError: Python version mismatch: module was compiled <span class=\"keyword\">for</span> Python 3.10, but the interpreter version is incompatible: 3.12.9 (main, Feb 12 2025, 14:50:50) [Clang 19.1.6 ].</span><br></pre></td></tr></table></figure>\n<p>对于这个问题，我们就需要通过强制规范构建顺序来保证项目自始至终是在我们创建的虚拟环境中构建并运行的，以确保项目环境的一致性；结合前面提到的“方便地构建方法”，我们就可以将众多的构建命令依序整合到一个<code>bash</code>脚本中，也就是所谓的<strong>自动化构建脚本</strong>：</p>\n<p><code>build.sh</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#———————————————</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 清理旧构建</span></span><br><span class=\"line\"><span class=\"comment\">#———————————————</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;清理旧构建文件...&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf build python/three_body* .venv/ vcpkg_installed/ vcpkg/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#———————————————</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 创建并激活 uv 虚拟环境（Python 3.12）</span></span><br><span class=\"line\"><span class=\"comment\">#———————————————</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;创建并激活 Python 3.12 虚拟环境...&quot;</span></span><br><span class=\"line\">uv venv .venv         <span class=\"comment\"># 默认为系统 Python3.12</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> .venv/bin/activate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 Python 可视化脚本依赖</span></span><br><span class=\"line\">uv pip install -r requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#———————————————</span></span><br><span class=\"line\"><span class=\"comment\"># 3. 用 venv 中的 Python 配置 &amp; 编译 C++ 扩展</span></span><br><span class=\"line\"><span class=\"comment\">#———————————————</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;配置 CMake（指向 venv 中的 python）...&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># cmake -B build \\</span></span><br><span class=\"line\"><span class=\"comment\">#   -DCMAKE_TOOLCHAIN_FILE=~/vcpkg/scripts/buildsystems/vcpkg.cmake \\</span></span><br><span class=\"line\"><span class=\"comment\">#   -DPython3_EXECUTABLE=$(which python) \\</span></span><br><span class=\"line\"><span class=\"comment\">#   -DCMAKE_BUILD_TYPE=Release</span></span><br><span class=\"line\"></span><br><span class=\"line\">cmake --preset=vcpkg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;开始编译 C++ 扩展...&quot;</span></span><br><span class=\"line\">cmake --build build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#———————————————</span></span><br><span class=\"line\"><span class=\"comment\"># 4. 检查生成结果</span></span><br><span class=\"line\"><span class=\"comment\">#———————————————</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;生成的 Python 模块：&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -l python/ | grep three_body</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#———————————————</span></span><br><span class=\"line\"><span class=\"comment\"># 5. 运行可视化脚本</span></span><br><span class=\"line\"><span class=\"comment\">#———————————————</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;执行 uv run python/visualize.py 启动三体模拟...&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;执行 uv run python/dynamic.py 启动动态模拟...&quot;</span></span><br></pre></td></tr></table></figure>\n<p>首先为脚本添加运行权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x build.sh</span><br></pre></td></tr></table></figure>\n<p>随后就可以直接通过脚本进行自动化构建了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./build.sh</span><br></pre></td></tr></table></figure>\n<p>此时由于项目环境独立于系统全局的Python环境，构建运行均基于这个虚拟环境，确保了环境的一致性，也就不会出现像上面的环境冲突问题了。</p>\n",
            "tags": [
                "C++",
                "Python",
                "vcpkg",
                "CMake"
            ]
        }
    ]
}