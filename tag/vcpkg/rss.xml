<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>virtualguard&#39;s Blog • Posts by &#34;vcpkg&#34; tag</title>
        <link>http://blog.virtualguard101.xyz</link>
        <description>&lt;/&gt;</description>
        <language>zh-CN</language>
        <pubDate>Fri, 23 May 2025 14:18:21 +0800</pubDate>
        <lastBuildDate>Fri, 23 May 2025 14:18:21 +0800</lastBuildDate>
        <category>Linux</category>
        <category>C++</category>
        <category>Python</category>
        <category>vcpkg</category>
        <category>CMake</category>
        <category>Build Tools</category>
        <category>web开发</category>
        <category>docker</category>
        <item>
            <guid isPermalink="true">http://blog.virtualguard101.xyz/2025/05/23/3BodySimulator/</guid>
            <title>3BodySimulator：Python &amp; C++ 项目标准化构建</title>
            <link>http://blog.virtualguard101.xyz/2025/05/23/3BodySimulator/</link>
            <category>C++</category>
            <category>Python</category>
            <category>vcpkg</category>
            <category>CMake</category>
            <category>Build Tools</category>
            <pubDate>Fri, 23 May 2025 14:18:21 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;导言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#导言&#34;&gt;&lt;/a&gt; 导言&lt;/h2&gt;
&lt;p&gt;近期刚刚结束&lt;a href=&#34;https://web.stanford.edu/class/cs106l/&#34;&gt;CS106L | Standard C++ features and syntax&lt;/a&gt;的学习，想借此机会完善一下对C++项目构建的学习，如&lt;code&gt;CMake&lt;/code&gt;等构建工具的使用，故立此项。&lt;/p&gt;
&lt;p&gt;通过本次项目你会了解到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;C++项目标准化基础&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;CMake&lt;/code&gt;、&lt;code&gt;vcpkg&lt;/code&gt;等C++构建工具的基本使用&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;多语言配合构建（C++ &amp;amp; Python）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是完成此次项目所需的基本条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C++ 编译器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;：版本控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cmake.org/documentation/&#34;&gt;CMake(&lt;em&gt;&amp;gt;= v3.22&lt;/em&gt;)&lt;/a&gt;：C++构建工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/zh-cn/vcpkg/&#34;&gt;vcpkg&lt;/a&gt;：C++包管理工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python(&lt;em&gt;&amp;gt;= v3.12&lt;/em&gt;)&lt;/a&gt;：可视化模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;uv&lt;/a&gt;：Python包管理工具&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文中的构建平台为&lt;strong&gt;Ubuntu22.04&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此次项目注重C++项目的标准化以及构建工具（&lt;code&gt;vcpkg&lt;/code&gt;、&lt;code&gt;CMake&lt;/code&gt;）的使用，代码逻辑部分主体由&lt;code&gt;DeepSeek&lt;/code&gt;、&lt;code&gt;ChatGPT&lt;/code&gt;等AI大模型完成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目仓库：&lt;a href=&#34;https://github.com/virtualguard101/3BodySimulator&#34;&gt;3BodySimulator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;初始化项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初始化项目&#34;&gt;&lt;/a&gt; 初始化项目&lt;/h2&gt;
&lt;p&gt;首先使用两个语言的包管理器分别对项目进行初始化：&lt;/p&gt;
&lt;h3 id=&#34;vcpkg&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vcpkg&#34;&gt;&lt;/a&gt; &lt;code&gt;vcpkg&lt;/code&gt;&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;vcpkg new --application&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对生成的&lt;code&gt;vcpkg.json&lt;/code&gt;进行配置：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;three-body-simulator&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;version-string&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;python3&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;&amp;quot;version&amp;gt;=&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;3.12.9&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;pybind11&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;builtin-baseline&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;a337f5fe100f83026072765ea63a8776f984f6fd&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意所有键值对的内容只能包含&lt;strong&gt;小写字母&lt;/strong&gt;，否则后续构建时会报错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;uv&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#uv&#34;&gt;&lt;/a&gt; &lt;code&gt;uv&lt;/code&gt;&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;uv init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将项目信息写入&lt;code&gt;pyproject.toml&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[project]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;name = &lt;span class=&#34;string&#34;&gt;&amp;quot;3BodySimulator&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;version = &lt;span class=&#34;string&#34;&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;description = &lt;span class=&#34;string&#34;&gt;&amp;quot;The visualization simulation of three-body motion implemented using C++ &amp;amp; Python.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;readme = &lt;span class=&#34;string&#34;&gt;&amp;quot;README.md&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;requires-python = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;gt;=3.12&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dependencies = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;matplotlib&amp;gt;=3.8.0&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;ninja&amp;gt;=1.11.1&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;numpy&amp;gt;=1.26.0&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;pybind11&amp;gt;=2.11.1&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;pygame&amp;gt;=2.6.1&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后去除无用的生成配置即可。&lt;/p&gt;
&lt;p&gt;随后对项目结构初始化：&lt;/p&gt;
&lt;h3 id=&#34;项目结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#项目结构&#34;&gt;&lt;/a&gt; 项目结构&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── build.sh              &lt;span class=&#34;comment&#34;&gt;# build shell script&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── CMakeLists.txt        &lt;span class=&#34;comment&#34;&gt;# CMake build config(outer)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── CMakePresets.json     &lt;span class=&#34;comment&#34;&gt;# vcpkg CMake toolchain config(public)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── CMakeUserPresets.json &lt;span class=&#34;comment&#34;&gt;# vcpkg CMake toolchain config(private)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── LICENSE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── pyproject.toml        &lt;span class=&#34;comment&#34;&gt;# Python project config&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── python                &lt;span class=&#34;comment&#34;&gt;# Python script folder&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── dynamic.py&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── example.json      &lt;span class=&#34;comment&#34;&gt;# example input json data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── pyonly.py&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   └── visualize.py&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── requirements.txt      &lt;span class=&#34;comment&#34;&gt;# Python dependencies&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── src                   &lt;span class=&#34;comment&#34;&gt;# C++ source folder&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── CMakeLists.txt    &lt;span class=&#34;comment&#34;&gt;# CMake build config(inner)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── three_body.cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   └── three_body.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── uv.lock&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── vcpkg-configuration.json&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;└── vcpkg.json            &lt;span class=&#34;comment&#34;&gt;# vcpkg dependencies config&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;代码实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代码实现&#34;&gt;&lt;/a&gt; 代码实现&lt;/h2&gt;
&lt;p&gt;这部分并不是我们本次项目的重点，故使用了大语言模型（&lt;a href=&#34;https://chatgpt.com/&#34;&gt;chatGPT&lt;/a&gt;）负责该部分的实现与完善。&lt;s&gt;绝对不是我想偷懒😋&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;其中采用的技术栈在项目的&lt;a href=&#34;https://github.com/virtualguard101/3BodySimulator?tab=readme-ov-file#tech-stack-in-this-project&#34;&gt;README&lt;/a&gt;中有详细的总结。后续会视情况完善对这一部分的学习和解构。&lt;/p&gt;
&lt;p&gt;在实现的代码源文件中，我们使用C++作为&lt;strong&gt;底层物理引擎&lt;/strong&gt;的构建语言，使用Python作为&lt;strong&gt;主程序语言&lt;/strong&gt;并负责&lt;strong&gt;可视化与用户交互&lt;/strong&gt;。二者的源文件分别位于项目根目录的&lt;code&gt;src&lt;/code&gt;和&lt;code&gt;python&lt;/code&gt;文件夹下。&lt;/p&gt;
&lt;h2 id=&#34;项目构建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#项目构建&#34;&gt;&lt;/a&gt; 项目构建&lt;/h2&gt;
&lt;p&gt;接下来进入本项目的重点。&lt;/p&gt;
&lt;p&gt;创建本次项目的主要目的是为学习&lt;strong&gt;CMake&lt;/strong&gt;和&lt;strong&gt;vcpkg&lt;/strong&gt;的基本使用，故将项目构建配置的部分视为重点。&lt;/p&gt;
&lt;p&gt;本项目使用&lt;code&gt;CMake&lt;/code&gt; &amp;amp; &lt;code&gt;vcpkg&lt;/code&gt;工具链进行C++的构建，使用&lt;code&gt;uv&lt;/code&gt;进行Python的依赖与项目管理，可遵循『&lt;strong&gt;获取依赖→配置→编译→虚拟环境运行&lt;/strong&gt;』的流程对项目进行构建与测试运行：&lt;/p&gt;
&lt;h3 id=&#34;获取依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取依赖&#34;&gt;&lt;/a&gt; 获取依赖&lt;/h3&gt;
&lt;p&gt;类似Python的&lt;code&gt;pip&lt;/code&gt;，&lt;code&gt;vcpkg&lt;/code&gt;是一个相对简单易用的cpp包管理工具（虽然但是各种配置还是让人用的很难受🙃，毕竟C++的生态就这样），在该项目中，我们将使用它相对容易地获取项目所需的相关依赖。&lt;/p&gt;
&lt;p&gt;安装就不再赘述，详情参考&lt;a href=&#34;https://learn.microsoft.com/zh-cn/vcpkg/&#34;&gt;官方文档&lt;/a&gt;，注意记住自己安装的路径，以便后续工具链的配置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑依赖列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在本项目中，我们选择使用C++配合Python完成模拟实现。chatGPT给出的实现思路是&lt;strong&gt;使用cpp实现天体运动的底层物理引擎，构建输出一个Python可直接调用的共享库（&lt;code&gt;.so&lt;/code&gt;/&lt;code&gt;.pyd&lt;/code&gt;），然后由Python在可视化实现中直接调用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因此，在C++模块的实现中，我们需要使用&lt;a href=&#34;https://pybind11.readthedocs.io/en/stable/basics.html&#34;&gt;pybind11&lt;/a&gt;联系二者。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;pybind11&lt;/code&gt;是一个轻量级的库，用于将C++代码绑定到Python中，使得Python能够调用cpp的高性能代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了引入&lt;code&gt;pybind11&lt;/code&gt;，我们就需要通过配置&lt;code&gt;vcpkg.json&lt;/code&gt;的依赖列表使得后续运行构建时能够导入它。&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;初始化项目&lt;/strong&gt;的过程中，我们已经对&lt;code&gt;vcpkg.json&lt;/code&gt;进行了配置。是的，那就是所谓的&lt;strong&gt;依赖列表&lt;/strong&gt;。根据&lt;a href=&#34;https://learn.microsoft.com/zh-cn/vcpkg/get_started/get-started?pivots=shell-bash#3---add-dependencies-and-project-files&#34;&gt;官方文档&lt;/a&gt;的描述，也可通过&lt;code&gt;port&lt;/code&gt;命令添加依赖：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;vcpkg add port pybind11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;构建配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构建配置&#34;&gt;&lt;/a&gt; 构建配置&lt;/h3&gt;
&lt;p&gt;这是该项目中最为重要的一步，主要的工作简单来说就是配置&lt;code&gt;CMakeLists.txt&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;由于我们使用了第三方工具&lt;code&gt;vcpkg&lt;/code&gt;作为包管理工具，合理配置这二者之间的工具链关系就尤为关键。&lt;/p&gt;
&lt;p&gt;我们配置的思路是，在项目的根目录和用于存放C++模块的&lt;code&gt;src&lt;/code&gt;中分别创建一个&lt;code&gt;CMakeLists.txt&lt;/code&gt;。前者用于配置CMake在构建过程中与vcpkg的工具链参数；后者则专门用于配置cpp模块的构建逻辑。&lt;/p&gt;
&lt;p&gt;由此便有了以下配置：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 项目基本参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cmake_minimum_required(VERSION 3.20)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;project(3BodySimulator LANGUAGES CXX)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 使用 vcpkg 的 Toolchain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(NOT DEFINED CMAKE_TOOLCHAIN_FILE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMAKE_TOOLCHAIN_FILE &lt;span class=&#34;string&#34;&gt;&amp;quot;~/vcpkg/scripts/buildsystems/vcpkg.cmake&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DPython3_EXECUTABLE=$(&lt;span class=&#34;built_in&#34;&gt;which&lt;/span&gt; python)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DCMAKE_BUILD_TYPE=Release&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CACHE STRING &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endif()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 把 src 子目录加入构建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;add_subdirectory(src)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;src/CMakeLists.txt&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 查找 pybind11（由 vcpkg 安装并集成）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;find_package(pybind11 CONFIG REQUIRED)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 源文件列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pybind11_add_module(three_body&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  three_body.cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 设置头文件路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;target_include_directories(three_body&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  PRIVATE &lt;span class=&#34;variable&#34;&gt;$&amp;#123;CMAKE_CURRENT_SOURCE_DIR&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 设置 C++17 标准&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;target_compile_features(three_body PUBLIC cxx_std_17)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 把生成的共享库 (.so/.pyd) 放到 ../python 目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set_target_properties(three_body PROPERTIES&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  LIBRARY_OUTPUT_DIRECTORY &lt;span class=&#34;variable&#34;&gt;$&amp;#123;CMAKE_SOURCE_DIR&amp;#125;&lt;/span&gt;/python&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  OUTPUT_NAME &lt;span class=&#34;string&#34;&gt;&amp;quot;three_body&amp;quot;&lt;/span&gt;    &lt;span class=&#34;comment&#34;&gt;# 忽略 ABI tag，统一输出 three_body.so&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  PREFIX &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;                   &lt;span class=&#34;comment&#34;&gt;# 无前缀&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  SUFFIX &lt;span class=&#34;string&#34;&gt;&amp;quot;.so&amp;quot;&lt;/span&gt;                &lt;span class=&#34;comment&#34;&gt;# 强制后缀 .so&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;正常情况下，按照以上构建配置，只需执行如下命令即可进行C++模块的构建生成与编译：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 配置生成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cmake --preset=vcpkg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 编译生成.so&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cmake --build build/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果不出意外的话，cmake会在&lt;code&gt;python&lt;/code&gt;路径下生成一个名为&lt;code&gt;three_body&lt;/code&gt;的&lt;code&gt;.so&lt;/code&gt;共享库（为了方便调用，故将共享库生成到与py脚本相同的目录下）。事实上，到这里，我们的项目就可以直接通过&lt;code&gt;python&lt;/code&gt;命令直接运行了（当然，前提是你的Python依赖没有问题）。&lt;/p&gt;
&lt;p&gt;&lt;s&gt;uv：世界，遗忘我…🙃&lt;/s&gt;&lt;/p&gt;
&lt;h3 id=&#34;uvpython虚拟环境配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#uvpython虚拟环境配置&#34;&gt;&lt;/a&gt; &lt;code&gt;uv&lt;/code&gt;Python虚拟环境配置&lt;/h3&gt;
&lt;p&gt;虽然完成了C++模块的构建工作基本就意味着项目能够跑起来了，但Python混乱的环境依赖问题在某些时候是出了名的让人头痛。为了避免这一情况，我们需要创建一个虚拟环境来运行我们的项目，为此，我们选择了&lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;uv&lt;/a&gt;作为该项目的Python包管理器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;uv&lt;/code&gt;是一个由&lt;code&gt;Rust&lt;/code&gt;编写的高性能Python包管理工具，其安装速度比传统工具要快上不少，同时还支持并行安装。&lt;/p&gt;
&lt;p&gt;更重要的是，它提供了一种十分便捷和强大的&lt;strong&gt;项目依赖管理&lt;/strong&gt;与&lt;strong&gt;虚拟环境管理&lt;/strong&gt;方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在初始化项目的过程中，我们已经使用其进行了项目信息的初始化配置，接下来，我们将继续使用它轻松地配置和运行我们的项目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建Python虚拟环境并激活&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;uv venv .venv         &lt;span class=&#34;comment&#34;&gt;# 默认为系统 Python3.12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;source&lt;/span&gt; .venv/bin/activate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在虚拟环境中安装依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;uv pip install -r requirements.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装好依赖后，我们就可以在虚拟环境中完美地运行我们的项目了：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;uv run python/dynaminc.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;自动化构建脚本&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自动化构建脚本&#34;&gt;&lt;/a&gt; 自动化构建脚本&lt;/h3&gt;
&lt;p&gt;说了这么一堆，有人可能要问了：这么多的构建命令，还挺麻烦的，而且如果不小心搞乱了不就完犊子了？难道就没有方便的构建方式吗？&lt;/p&gt;
&lt;p&gt;有的兄弟，有的。&lt;/p&gt;
&lt;p&gt;事实上，我们上面讲解的构建顺序本身就有点问题：&lt;/p&gt;
&lt;p&gt;如果观察仔细的话，应该会注意到，前文中根目录下的&lt;code&gt;CMakeLists.txt&lt;/code&gt;中在配置工具链时指定了一个名为&lt;code&gt;DPython3_EXECUTABLE&lt;/code&gt;的参数，这个参数的功能是显式指定运行Python脚本的Python解释器，作用是强制保持运行环境的Python版本一致性。如果你在系统上使用与&lt;code&gt;uv&lt;/code&gt;配置中Python版本不一致的解释器，且没有在构建C++模块前创建并激活Python虚拟环境，那么你在尝试运行项目时就会得到类似下面的报错信息：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Traceback (most recent call last):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  File &lt;span class=&#34;string&#34;&gt;&amp;quot;/home/virtualguard/projects/researching/cpp-engine/3BodySimulator/python/visualize.py&amp;quot;&lt;/span&gt;, line 11, &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    from three_body import Body, step&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ImportError: Python version mismatch: module was compiled &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; Python 3.10, but the interpreter version is incompatible: 3.12.9 (main, Feb 12 2025, 14:50:50) [Clang 19.1.6 ].&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于这个问题，我们就需要通过强制规范构建顺序来保证项目自始至终是在我们创建的虚拟环境中构建并运行的，以确保项目环境的一致性；结合前面提到的“方便地构建方法”，我们就可以将众多的构建命令依序整合到一个&lt;code&gt;bash&lt;/code&gt;脚本中，也就是所谓的&lt;strong&gt;自动化构建脚本&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;build.sh&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt; -e&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#———————————————&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1. 清理旧构建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#———————————————&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;清理旧构建文件...&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;rm&lt;/span&gt; -rf build python/three_body* .venv/ vcpkg_installed/ vcpkg/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#———————————————&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2. 创建并激活 uv 虚拟环境（Python 3.12）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#———————————————&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;创建并激活 Python 3.12 虚拟环境...&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;uv venv .venv         &lt;span class=&#34;comment&#34;&gt;# 默认为系统 Python3.12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;source&lt;/span&gt; .venv/bin/activate&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 安装 Python 可视化脚本依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;uv pip install -r requirements.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#———————————————&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3. 用 venv 中的 Python 配置 &amp;amp; 编译 C++ 扩展&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#———————————————&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;配置 CMake（指向 venv 中的 python）...&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# cmake -B build \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#   -DCMAKE_TOOLCHAIN_FILE=~/vcpkg/scripts/buildsystems/vcpkg.cmake \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#   -DPython3_EXECUTABLE=$(which python) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#   -DCMAKE_BUILD_TYPE=Release&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cmake --preset=vcpkg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;开始编译 C++ 扩展...&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cmake --build build&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#———————————————&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4. 检查生成结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#———————————————&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;生成的 Python 模块：&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;ls&lt;/span&gt; -l python/ | grep three_body&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#———————————————&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 5. 运行可视化脚本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#———————————————&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;执行 uv run python/visualize.py 启动三体模拟...&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;执行 uv run python/dynamic.py 启动动态模拟...&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先为脚本添加运行权限：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;chmod&lt;/span&gt; +x build.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后就可以直接通过脚本进行自动化构建了：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;./build.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时由于项目环境独立于系统全局的Python环境，构建运行均基于这个虚拟环境，确保了环境的一致性，也就不会出现像上面的环境冲突问题了。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
