<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Resources on VIRTUALGUARD{}</title>
    <link>https://virtualguard101.github.io/categories/resources/</link>
    <description>Recent content in Resources on VIRTUALGUARD{}</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 18 Apr 2025 17:07:13 +0800</lastBuildDate>
    <atom:link href="https://virtualguard101.github.io/categories/resources/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>工程类资源</title>
      <link>https://virtualguard101.github.io/post/resource/engineered/</link>
      <pubDate>Sun, 13 Apr 2025 17:07:13 +0800</pubDate>
      <guid>https://virtualguard101.github.io/post/resource/engineered/</guid>
      <description>&lt;h2 id=&#34;工程化基础&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%b7%a5%e7%a8%8b%e5%8c%96%e5%9f%ba%e7%a1%80&#34;&gt;&lt;/a&gt;&#xA;工程化基础&#xA;&lt;/h2&gt;&lt;h3 id=&#34;常用工具&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%b8%b8%e7%94%a8%e5%b7%a5%e5%85%b7&#34;&gt;&lt;/a&gt;&#xA;常用工具&#xA;&lt;/h3&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;事实上，这个模块所提及的工具基本可以在课程&lt;a href=&#34;https://missing-semester-cn.github.io/&#34;&gt;计算机教育中缺失的一课&lt;/a&gt;中见到。下面归档我个人认为对我帮助很大的几个资源。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;linux-操作系统&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#linux-%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f&#34;&gt;&lt;/a&gt;&#xA;Linux 操作系统&#xA;&lt;/h4&gt;&lt;h5 id=&#34;overthewire-bandit&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#overthewire-bandit&#34;&gt;&lt;/a&gt;&#xA;OverTheWire: Bandit&#xA;&lt;/h5&gt;&lt;p&gt;这个教程旨在通过&lt;strong&gt;hack游戏&lt;/strong&gt;的方式使初学者了解&lt;strong&gt;Linux系统&lt;/strong&gt;的各种常用命令，形式上类似于&lt;strong&gt;CTF(Capture the Flag)&lt;/strong&gt;，即通过某些手段获取远程主机上的某个关键信息以通过关卡。同时，这个教程的&lt;a href=&#34;https://overthewire.org/&#34;&gt;网址根目录&lt;/a&gt;上还有许多其他有意思的**wargames（网络对抗）**小游戏可供学习品鉴😋。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;教程网址：&lt;a href=&#34;https://overthewire.org/wargames/bandit/&#34;&gt;OverTheWire: Bandit&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;通关教程：&lt;a href=&#34;https://juejin.cn/post/7234467007717982268&#34;&gt;Linux命令-bandit通关日志 | 掘金-ReisenSS&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;git分布式版本控制系统&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#git%e5%88%86%e5%b8%83%e5%bc%8f%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6%e7%b3%bb%e7%bb%9f&#34;&gt;&lt;/a&gt;&#xA;Git（分布式版本控制系统）&#xA;&lt;/h4&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;Git与Linux均出自荷兰程序员Linus Torvalds之手。Git是Linus为了帮助管理Linux内核开发而开发的一个&lt;strong&gt;版本控制软件&lt;/strong&gt;（据说是他本人嫌弃当时现有的版本控制工具不好用，然后就自己搞了一个，大佬就是这么任性）。Git在项目标准化中的作用是不言而喻的，由于其&lt;strong&gt;开源&lt;/strong&gt;以及&lt;strong&gt;高性能&lt;/strong&gt;的特性，Git已经成为广泛运用于各种项目的版本控制利器。对于工程化的学习，Git是必不可少的。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h5 id=&#34;learn-git-branch&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#learn-git-branch&#34;&gt;&lt;/a&gt;&#xA;Learn Git Branch&#xA;&lt;/h5&gt;&lt;p&gt;与&lt;a href=&#34;https://overthewire.org/wargames/bandit/&#34;&gt;OverTheWire: Bandit&lt;/a&gt;相同，旨在通过关卡游戏的方式让初学者了解Git的各种命令。不同的是，这个教程制作了精美的图形界面，将Git的各种命令通过生动形象的动画展示出来，使人能够更加深入理解不同命令的作用效果。正如进入网页后教程的欢迎辞所言，这是我目前所见过的“最好的Git教程”。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;教程网址：&lt;a href=&#34;https://learngitbranching.js.org/&#34;&gt;Learn Git Branching&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;vim基于命令行的文本编辑器&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#vim%e5%9f%ba%e4%ba%8e%e5%91%bd%e4%bb%a4%e8%a1%8c%e7%9a%84%e6%96%87%e6%9c%ac%e7%bc%96%e8%be%91%e5%99%a8&#34;&gt;&lt;/a&gt;&#xA;Vim（基于命令行的文本编辑器）&#xA;&lt;/h4&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;绝大多数人在刚开始接触Vim时会被其“反人类”的设计所折磨，但我想说的是，当你真正掌握vim的正确打开方式时，你会发现你在使用它写文档/代码时，双手几乎可以不用离开键盘。以我为例，尽管我更喜欢使用&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;vscode&lt;/a&gt;作为我的代码编辑器，但我仍然为它装载了&lt;a href=&#34;https://github.com/VSCodeVim/Vim&#34;&gt;Vim 模式的插件&lt;/a&gt;&lt;br&gt;&#xA;下面直接引用&lt;a href=&#34;https://missing-semester-cn.github.io/2020/editors/&#34;&gt;编辑器（Vim） | the missing semester of your cs education&lt;/a&gt;中的一段话来作推荐Vim的理由：&lt;br&gt;&#xA;在编程的时候，你会把大量时间花在阅读/编辑而不是在写代码上。所以，Vim 是一个 多模态 编辑 器：它对于插入文字和操纵文字有不同的模式。Vim 是可编程的（可以使用 Vimscript 或者像 Python 一样的其他程序语言），Vim 的接口本身也是一个程序语言：键入操作（以及其助记名） 是命令，这些命令也是可组合的。Vim 避免了使用鼠标，因为那样太慢了；Vim 甚至避免用 上下左右键因为那样需要太多的手指移动。这样的设计哲学使得 Vim 成为了一个能跟上你思维速度的编辑器。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h5 id=&#34;编辑器vim-mit-missing-semester&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e7%bc%96%e8%be%91%e5%99%a8vim-mit-missing-semester&#34;&gt;&lt;/a&gt;&#xA;编辑器（Vim）| MIT missing semester&#xA;&lt;/h5&gt;&lt;p&gt;你说的对，但它确实讲解的挺全面的，从基本操作到自定义扩展，再到进阶操作，应有尽有。&lt;/p&gt;</description>
    </item>
    <item>
      <title>理论类资源</title>
      <link>https://virtualguard101.github.io/post/resource/academic/</link>
      <pubDate>Sun, 13 Apr 2025 17:05:18 +0800</pubDate>
      <guid>https://virtualguard101.github.io/post/resource/academic/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;：本页面的食用方式如下：&lt;/p&gt;&#xA;&lt;p&gt;1.&lt;strong&gt;课程模块&lt;/strong&gt;主要由&lt;code&gt;教材（电子书/网页文档）&lt;/code&gt;、&lt;code&gt;幻灯片&lt;/code&gt;、&lt;code&gt;课程主页（网址）&lt;/code&gt;、&lt;code&gt;csdiy课程信息页&lt;/code&gt;、&lt;code&gt;课程录播视频&lt;/code&gt;五个要素组成，由于不同课程的差异以及资源碎片化的特性，上述五个要素一般不会同时出现，当然，也有可能你可以在一个汇总性的要素中找到其他的要素。各个要素会按照我个人认为的权重进行排序。例如，在CS61A中，精读课程的部分内容&lt;strong&gt;对我来说&lt;/strong&gt;是合理的，那么我便将&lt;code&gt;课程主页&lt;/code&gt;、&lt;code&gt;csdiy课程信息页&lt;/code&gt;这类汇总性较强的要素排在前面；而对于CS106L而言，仅仅需要阅读课程教材及幻灯片就能很大程度上掌握课程的主要内容，以及当下我只希望快速通读一下这个课程的主要内容，那么我就将&lt;code&gt;教材&lt;/code&gt;与&lt;code&gt;幻灯片&lt;/code&gt;置前。&lt;/p&gt;&#xA;&lt;p&gt;2.&lt;strong&gt;进阶理论&lt;/strong&gt;：大部分进阶理论不是处于&lt;strong&gt;技术闭源&lt;/strong&gt;的状态就是只能通过原始学术论文了解，该模块的内容除去部分科普性的资料，大部分是晦涩难懂的。但可以肯定的是，所有的进阶理论都有它们对应的基础依赖。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;课程基础理论&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e8%af%be%e7%a8%8b%e5%9f%ba%e7%a1%80%e7%90%86%e8%ae%ba&#34;&gt;&lt;/a&gt;&#xA;课程/基础理论&#xA;&lt;/h2&gt;&lt;h3 id=&#34;编程入门&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e7%bc%96%e7%a8%8b%e5%85%a5%e9%97%a8&#34;&gt;&lt;/a&gt;&#xA;编程入门&#xA;&lt;/h3&gt;&lt;h4 id=&#34;mit-missing-semester-the-missing-semester-of-your-cs-education&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#mit-missing-semester-the-missing-semester-of-your-cs-education&#34;&gt;&lt;/a&gt;&#xA;MIT-missing-semester: The Missing Semester of Your CS Education&#xA;&lt;/h4&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;课程简述&lt;/strong&gt;：课程主要传授在大学课堂上几乎不会涉及但对于cs学习无比重要的工具或零散知识点。例如shell、Git（版本控制）等&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;课程网址/教程：&lt;a href=&#34;https://missing.csail.mit.edu/&#34;&gt;The Missing Semester of Your CS Education&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;课程中文网址/教程：&lt;a href=&#34;https://missing-semester-cn.github.io/&#34;&gt;计算机教育中缺失的一课&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;csdiy课程信息页：&lt;a href=&#34;https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/MIT-Missing-Semester/&#34;&gt;MIT-Missing-Semester | csdiy&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;del&gt;pass&lt;/del&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;cs61a-structure-and-interpretation-of-computer-programs&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#cs61a-structure-and-interpretation-of-computer-programs&#34;&gt;&lt;/a&gt;&#xA;CS61A: Structure and Interpretation of Computer Programs&#xA;&lt;/h4&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;课程简述&lt;/strong&gt;：伯克利CS61系列的第一门课程，使用python作为课程的编程语言。强调抽象，让学生掌握用程序来解决实际问题，而不关注底层的硬件细节。oop（面向对象编程）入门利器。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;课程官方网址：&lt;a href=&#34;https://cs61a.org/&#34;&gt;CS61A | UC Berkeley&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;往期课程页面备份：&lt;a href=&#34;https://hqhq1025.github.io/cs61a-24fa-backup/&#34;&gt;Fall 2024 | hqhq1025&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;课程教材：&lt;a href=&#34;https://www.composingprograms.com/&#34;&gt;Composing Programs&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;课程教材中译：&lt;a href=&#34;https://composingprograms.netlify.app/&#34;&gt;COMPOSING PROGRAMS&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;csdiy课程信息页：&lt;a href=&#34;https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/Python/CS61A/&#34;&gt;CS61A: Structure and Interpretation of Computer Programs | csdiy&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;del&gt;half pass 【py-oop】&lt;/del&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;pass 【Functional Programming】【SQL】&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
